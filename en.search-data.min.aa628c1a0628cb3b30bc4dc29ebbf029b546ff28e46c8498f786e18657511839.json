[{"id":0,"href":"/docs/movies/2021_%E9%87%91%E9%A6%AC%E5%BD%B1%E5%B1%95/","title":"2021 金馬影展","section":"電影","content":"2021 金馬影展 #  片單 #   11/11  水手服與機關槍 緝魂   11/12  正義老司機 狼行者   11/13  魂斷威尼斯 鹿王 不要靜靜駛入長夜   11/14  魔法阿嬤 瀑布   11/15  我復仇，你付錢   11/16  酷愛電影的龐波小姐 法蘭西特派週報   11/17  河畔小日子 樂隊來訪時   11/18  吾愛吾詩   11/20  海上花＋華麗寫實——海上花製作旅程 喜怒哀樂   11/21  繼園臺七號   11/22  硬漢小情歌   11/25  犬山記    "},{"id":1,"href":"/posts/creating-a-new-theme/","title":"Creating a New Theme","section":"隨筆","content":"Introduction #  This tutorial will show you how to create a simple theme in Hugo. I assume that you are familiar with HTML, the bash command line, and that you are comfortable using Markdown to format content. I\u0026rsquo;ll explain how Hugo uses templates and how you can organize your templates to create a theme. I won\u0026rsquo;t cover using CSS to style your theme.\nWe\u0026rsquo;ll start with creating a new site with a very basic template. Then we\u0026rsquo;ll add in a few pages and posts. With small variations on that, you will be able to create many different types of web sites.\nIn this tutorial, commands that you enter will start with the \u0026ldquo;$\u0026rdquo; prompt. The output will follow. Lines that start with \u0026ldquo;#\u0026rdquo; are comments that I\u0026rsquo;ve added to explain a point. When I show updates to a file, the \u0026ldquo;:wq\u0026rdquo; on the last line means to save the file.\nHere\u0026rsquo;s an example:\n## this is a comment $ echo this is a command this is a command ## edit the file $ vi foo.md +++ date = \u0026quot;2014-09-28\u0026quot; title = \u0026quot;creating a new theme\u0026quot; +++ bah and humbug :wq ## show it $ cat foo.md +++ date = \u0026quot;2014-09-28\u0026quot; title = \u0026quot;creating a new theme\u0026quot; +++ bah and humbug $ Some Definitions #  There are a few concepts that you need to understand before creating a theme.\nSkins #  Skins are the files responsible for the look and feel of your site. It’s the CSS that controls colors and fonts, it’s the Javascript that determines actions and reactions. It’s also the rules that Hugo uses to transform your content into the HTML that the site will serve to visitors.\nYou have two ways to create a skin. The simplest way is to create it in the layouts/ directory. If you do, then you don’t have to worry about configuring Hugo to recognize it. The first place that Hugo will look for rules and files is in the layouts/ directory so it will always find the skin.\nYour second choice is to create it in a sub-directory of the themes/ directory. If you do, then you must always tell Hugo where to search for the skin. It’s extra work, though, so why bother with it?\nThe difference between creating a skin in layouts/ and creating it in themes/ is very subtle. A skin in layouts/ can’t be customized without updating the templates and static files that it is built from. A skin created in themes/, on the other hand, can be and that makes it easier for other people to use it.\nThe rest of this tutorial will call a skin created in the themes/ directory a theme.\nNote that you can use this tutorial to create a skin in the layouts/ directory if you wish to. The main difference will be that you won’t need to update the site’s configuration file to use a theme.\nThe Home Page #  The home page, or landing page, is the first page that many visitors to a site see. It is the index.html file in the root directory of the web site. Since Hugo writes files to the public/ directory, our home page is public/index.html.\nSite Configuration File #  When Hugo runs, it looks for a configuration file that contains settings that override default values for the entire site. The file can use TOML, YAML, or JSON. I prefer to use TOML for my configuration files. If you prefer to use JSON or YAML, you’ll need to translate my examples. You’ll also need to change the name of the file since Hugo uses the extension to determine how to process it.\nHugo translates Markdown files into HTML. By default, Hugo expects to find Markdown files in your content/ directory and template files in your themes/ directory. It will create HTML files in your public/ directory. You can change this by specifying alternate locations in the configuration file.\nContent #  Content is stored in text files that contain two sections. The first section is the “front matter,” which is the meta-information on the content. The second section contains Markdown that will be converted to HTML.\nFront Matter #  The front matter is information about the content. Like the configuration file, it can be written in TOML, YAML, or JSON. Unlike the configuration file, Hugo doesn’t use the file’s extension to know the format. It looks for markers to signal the type. TOML is surrounded by “+++”, YAML by “---”, and JSON is enclosed in curly braces. I prefer to use TOML, so you’ll need to translate my examples if you prefer YAML or JSON.\nThe information in the front matter is passed into the template before the content is rendered into HTML.\nMarkdown #  Content is written in Markdown which makes it easier to create the content. Hugo runs the content through a Markdown engine to create the HTML which will be written to the output file.\nTemplate Files #  Hugo uses template files to render content into HTML. Template files are a bridge between the content and presentation. Rules in the template define what content is published, where it\u0026rsquo;s published to, and how it will rendered to the HTML file. The template guides the presentation by specifying the style to use.\nThere are three types of templates: single, list, and partial. Each type takes a bit of content as input and transforms it based on the commands in the template.\nHugo uses its knowledge of the content to find the template file used to render the content. If it can’t find a template that is an exact match for the content, it will shift up a level and search from there. It will continue to do so until it finds a matching template or runs out of templates to try. If it can’t find a template, it will use the default template for the site.\nPlease note that you can use the front matter to influence Hugo’s choice of templates.\nSingle Template #  A single template is used to render a single piece of content. For example, an article or post would be a single piece of content and use a single template.\nList Template #  A list template renders a group of related content. That could be a summary of recent postings or all articles in a category. List templates can contain multiple groups.\nThe homepage template is a special type of list template. Hugo assumes that the home page of your site will act as the portal for the rest of the content in the site.\nPartial Template #  A partial template is a template that can be included in other templates. Partial templates must be called using the “partial” template command. They are very handy for rolling up common behavior. For example, your site may have a banner that all pages use. Instead of copying the text of the banner into every single and list template, you could create a partial with the banner in it. That way if you decide to change the banner, you only have to change the partial template.\nCreate a New Site #  Let\u0026rsquo;s use Hugo to create a new web site. I\u0026rsquo;m a Mac user, so I\u0026rsquo;ll create mine in my home directory, in the Sites folder. If you\u0026rsquo;re using Linux, you might have to create the folder first.\nThe \u0026ldquo;new site\u0026rdquo; command will create a skeleton of a site. It will give you the basic directory structure and a useable configuration file.\n$ hugo new site ~/Sites/zafta $ cd ~/Sites/zafta $ ls -l total 8 drwxr-xr-x 7 quoha staff 238 Sep 29 16:49 . drwxr-xr-x 3 quoha staff 102 Sep 29 16:49 .. drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 archetypes -rw-r--r-- 1 quoha staff 82 Sep 29 16:49 config.toml drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 content drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 layouts drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 static $ Take a look in the content/ directory to confirm that it is empty.\nThe other directories (archetypes/, layouts/, and static/) are used when customizing a theme. That\u0026rsquo;s a topic for a different tutorial, so please ignore them for now.\nGenerate the HTML For the New Site #  Running the hugo command with no options will read all the available content and generate the HTML files. It will also copy all static files (that\u0026rsquo;s everything that\u0026rsquo;s not content). Since we have an empty site, it won\u0026rsquo;t do much, but it will do it very quickly.\n$ hugo --verbose INFO: 2014/09/29 Using config file: config.toml INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/ WARN: 2014/09/29 Unable to locate layout: [index.html _default/list.html _default/single.html] WARN: 2014/09/29 Unable to locate layout: [404.html] 0 draft content 0 future content 0 pages created 0 tags created 0 categories created in 2 ms $ The \u0026ldquo;--verbose\u0026rdquo; flag gives extra information that will be helpful when we build the template. Every line of the output that starts with \u0026ldquo;INFO:\u0026rdquo; or \u0026ldquo;WARN:\u0026rdquo; is present because we used that flag. The lines that start with \u0026ldquo;WARN:\u0026rdquo; are warning messages. We\u0026rsquo;ll go over them later.\nWe can verify that the command worked by looking at the directory again.\n$ ls -l total 8 drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 archetypes -rw-r--r-- 1 quoha staff 82 Sep 29 16:49 config.toml drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 content drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 layouts drwxr-xr-x 4 quoha staff 136 Sep 29 17:02 public drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 static $ See that new public/ directory? Hugo placed all generated content there. When you\u0026rsquo;re ready to publish your web site, that\u0026rsquo;s the place to start. For now, though, let\u0026rsquo;s just confirm that we have what we\u0026rsquo;d expect from a site with no content.\n$ ls -l public total 16 -rw-r--r-- 1 quoha staff 416 Sep 29 17:02 index.xml -rw-r--r-- 1 quoha staff 262 Sep 29 17:02 sitemap.xml $ Hugo created two XML files, which is standard, but there are no HTML files.\nTest the New Site #  Verify that you can run the built-in web server. It will dramatically shorten your development cycle if you do. Start it by running the \u0026ldquo;server\u0026rdquo; command. If it is successful, you will see output similar to the following:\n$ hugo server --verbose INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/ WARN: 2014/09/29 Unable to locate layout: [index.html _default/list.html _default/single.html] WARN: 2014/09/29 Unable to locate layout: [404.html] 0 draft content 0 future content 0 pages created 0 tags created 0 categories created in 2 ms Serving pages from /Users/quoha/Sites/zafta/public Web Server is available at http://localhost:1313 Press Ctrl+C to stop Connect to the listed URL (it\u0026rsquo;s on the line that starts with \u0026ldquo;Web Server\u0026rdquo;). If everything is working correctly, you should get a page that shows the following:\nindex.xml sitemap.xml That\u0026rsquo;s a listing of your public/ directory. Hugo didn\u0026rsquo;t create a home page because our site has no content. When there\u0026rsquo;s no index.html file in a directory, the server lists the files in the directory, which is what you should see in your browser.\nLet’s go back and look at those warnings again.\nWARN: 2014/09/29 Unable to locate layout: [index.html _default/list.html _default/single.html] WARN: 2014/09/29 Unable to locate layout: [404.html] That second warning is easier to explain. We haven’t created a template to be used to generate “page not found errors.” The 404 message is a topic for a separate tutorial.\nNow for the first warning. It is for the home page. You can tell because the first layout that it looked for was “index.html.” That’s only used by the home page.\nI like that the verbose flag causes Hugo to list the files that it\u0026rsquo;s searching for. For the home page, they are index.html, _default/list.html, and _default/single.html. There are some rules that we\u0026rsquo;ll cover later that explain the names and paths. For now, just remember that Hugo couldn\u0026rsquo;t find a template for the home page and it told you so.\nAt this point, you\u0026rsquo;ve got a working installation and site that we can build upon. All that’s left is to add some content and a theme to display it.\nCreate a New Theme #  Hugo doesn\u0026rsquo;t ship with a default theme. There are a few available (I counted a dozen when I first installed Hugo) and Hugo comes with a command to create new themes.\nWe\u0026rsquo;re going to create a new theme called \u0026ldquo;zafta.\u0026rdquo; Since the goal of this tutorial is to show you how to fill out the files to pull in your content, the theme will not contain any CSS. In other words, ugly but functional.\nAll themes have opinions on content and layout. For example, Zafta uses \u0026ldquo;post\u0026rdquo; over \u0026ldquo;blog\u0026rdquo;. Strong opinions make for simpler templates but differing opinions make it tougher to use themes. When you build a theme, consider using the terms that other themes do.\nCreate a Skeleton #  Use the hugo \u0026ldquo;new\u0026rdquo; command to create the skeleton of a theme. This creates the directory structure and places empty files for you to fill out.\n$ hugo new theme zafta $ ls -l total 8 drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 archetypes -rw-r--r-- 1 quoha staff 82 Sep 29 16:49 config.toml drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 content drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 layouts drwxr-xr-x 4 quoha staff 136 Sep 29 17:02 public drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 static drwxr-xr-x 3 quoha staff 102 Sep 29 17:31 themes $ find themes -type f | xargs ls -l -rw-r--r-- 1 quoha staff 1081 Sep 29 17:31 themes/zafta/LICENSE.md -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/archetypes/default.md -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/_default/list.html -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/_default/single.html -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/index.html -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/partials/footer.html -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/partials/header.html -rw-r--r-- 1 quoha staff 93 Sep 29 17:31 themes/zafta/theme.toml $ The skeleton includes templates (the files ending in .html), license file, a description of your theme (the theme.toml file), and an empty archetype.\nPlease take a minute to fill out the theme.toml and LICENSE.md files. They\u0026rsquo;re optional, but if you\u0026rsquo;re going to be distributing your theme, it tells the world who to praise (or blame). It\u0026rsquo;s also nice to declare the license so that people will know how they can use the theme.\n$ vi themes/zafta/theme.toml author = \u0026quot;michael d henderson\u0026quot; description = \u0026quot;a minimal working template\u0026quot; license = \u0026quot;MIT\u0026quot; name = \u0026quot;zafta\u0026quot; source_repo = \u0026quot;\u0026quot; tags = [\u0026quot;tags\u0026quot;, \u0026quot;categories\u0026quot;] :wq ## also edit themes/zafta/LICENSE.md and change ## the bit that says \u0026quot;YOUR_NAME_HERE\u0026quot; Note that the the skeleton\u0026rsquo;s template files are empty. Don\u0026rsquo;t worry, we\u0026rsquo;ll be changing that shortly.\n$ find themes/zafta -name '*.html' | xargs ls -l -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/_default/list.html -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/_default/single.html -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/index.html -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/partials/footer.html -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/partials/header.html $ Update the Configuration File to Use the Theme #  Now that we\u0026rsquo;ve got a theme to work with, it\u0026rsquo;s a good idea to add the theme name to the configuration file. This is optional, because you can always add \u0026ldquo;-t zafta\u0026rdquo; on all your commands. I like to put it the configuration file because I like shorter command lines. If you don\u0026rsquo;t put it in the configuration file or specify it on the command line, you won\u0026rsquo;t use the template that you\u0026rsquo;re expecting to.\nEdit the file to add the theme, add a title for the site, and specify that all of our content will use the TOML format.\n$ vi config.toml theme = \u0026quot;zafta\u0026quot; baseurl = \u0026quot;\u0026quot; languageCode = \u0026quot;en-us\u0026quot; title = \u0026quot;zafta - totally refreshing\u0026quot; MetaDataFormat = \u0026quot;toml\u0026quot; :wq $ Generate the Site #  Now that we have an empty theme, let\u0026rsquo;s generate the site again.\n$ hugo --verbose INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to /Users/quoha/Sites/zafta/public/ INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/ WARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html] 0 draft content 0 future content 0 pages created 0 tags created 0 categories created in 2 ms $ Did you notice that the output is different? The warning message for the home page has disappeared and we have an additional information line saying that Hugo is syncing from the theme\u0026rsquo;s directory.\nLet\u0026rsquo;s check the public/ directory to see what Hugo\u0026rsquo;s created.\n$ ls -l public total 16 drwxr-xr-x 2 quoha staff 68 Sep 29 17:56 css -rw-r--r-- 1 quoha staff 0 Sep 29 17:56 index.html -rw-r--r-- 1 quoha staff 407 Sep 29 17:56 index.xml drwxr-xr-x 2 quoha staff 68 Sep 29 17:56 js -rw-r--r-- 1 quoha staff 243 Sep 29 17:56 sitemap.xml $ Notice four things:\n Hugo created a home page. This is the file public/index.html. Hugo created a css/ directory. Hugo created a js/ directory. Hugo claimed that it created 0 pages. It created a file and copied over static files, but didn\u0026rsquo;t create any pages. That\u0026rsquo;s because it considers a \u0026ldquo;page\u0026rdquo; to be a file created directly from a content file. It doesn\u0026rsquo;t count things like the index.html files that it creates automatically.  The Home Page #  Hugo supports many different types of templates. The home page is special because it gets its own type of template and its own template file. The file, layouts/index.html, is used to generate the HTML for the home page. The Hugo documentation says that this is the only required template, but that depends. Hugo\u0026rsquo;s warning message shows that it looks for three different templates:\nWARN: 2014/09/29 Unable to locate layout: [index.html _default/list.html _default/single.html] If it can\u0026rsquo;t find any of these, it completely skips creating the home page. We noticed that when we built the site without having a theme installed.\nWhen Hugo created our theme, it created an empty home page template. Now, when we build the site, Hugo finds the template and uses it to generate the HTML for the home page. Since the template file is empty, the HTML file is empty, too. If the template had any rules in it, then Hugo would have used them to generate the home page.\n$ find . -name index.html | xargs ls -l -rw-r--r-- 1 quoha staff 0 Sep 29 20:21 ./public/index.html -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 ./themes/zafta/layouts/index.html $ The Magic of Static #  Hugo does two things when generating the site. It uses templates to transform content into HTML and it copies static files into the site. Unlike content, static files are not transformed. They are copied exactly as they are.\nHugo assumes that your site will use both CSS and JavaScript, so it creates directories in your theme to hold them. Remember opinions? Well, Hugo\u0026rsquo;s opinion is that you\u0026rsquo;ll store your CSS in a directory named css/ and your JavaScript in a directory named js/. If you don\u0026rsquo;t like that, you can change the directory names in your theme directory or even delete them completely. Hugo\u0026rsquo;s nice enough to offer its opinion, then behave nicely if you disagree.\n$ find themes/zafta -type d | xargs ls -ld drwxr-xr-x 7 quoha staff 238 Sep 29 17:38 themes/zafta drwxr-xr-x 3 quoha staff 102 Sep 29 17:31 themes/zafta/archetypes drwxr-xr-x 5 quoha staff 170 Sep 29 17:31 themes/zafta/layouts drwxr-xr-x 4 quoha staff 136 Sep 29 17:31 themes/zafta/layouts/_default drwxr-xr-x 4 quoha staff 136 Sep 29 17:31 themes/zafta/layouts/partials drwxr-xr-x 4 quoha staff 136 Sep 29 17:31 themes/zafta/static drwxr-xr-x 2 quoha staff 68 Sep 29 17:31 themes/zafta/static/css drwxr-xr-x 2 quoha staff 68 Sep 29 17:31 themes/zafta/static/js $ The Theme Development Cycle #  When you\u0026rsquo;re working on a theme, you will make changes in the theme\u0026rsquo;s directory, rebuild the site, and check your changes in the browser. Hugo makes this very easy:\n Purge the public/ directory. Run the built in web server in watch mode. Open your site in a browser. Update the theme. Glance at your browser window to see changes. Return to step 4.  I’ll throw in one more opinion: never work on a theme on a live site. Always work on a copy of your site. Make changes to your theme, test them, then copy them up to your site. For added safety, use a tool like Git to keep a revision history of your content and your theme. Believe me when I say that it is too easy to lose both your mind and your changes.\nCheck the main Hugo site for information on using Git with Hugo.\nPurge the public/ Directory #  When generating the site, Hugo will create new files and update existing ones in the public/ directory. It will not delete files that are no longer used. For example, files that were created in the wrong directory or with the wrong title will remain. If you leave them, you might get confused by them later. I recommend cleaning out your site prior to generating it.\nNote: If you\u0026rsquo;re building on an SSD, you should ignore this. Churning on a SSD can be costly.\nHugo\u0026rsquo;s Watch Option #  Hugo\u0026rsquo;s \u0026ldquo;--watch\u0026rdquo; option will monitor the content/ and your theme directories for changes and rebuild the site automatically.\nLive Reload #  Hugo\u0026rsquo;s built in web server supports live reload. As pages are saved on the server, the browser is told to refresh the page. Usually, this happens faster than you can say, \u0026ldquo;Wow, that\u0026rsquo;s totally amazing.\u0026rdquo;\nDevelopment Commands #  Use the following commands as the basis for your workflow.\n## purge old files. hugo will recreate the public directory. ## $ rm -rf public ## ## run hugo in watch mode ## $ hugo server --watch --verbose Here\u0026rsquo;s sample output showing Hugo detecting a change to the template for the home page. Once generated, the web browser automatically reloaded the page. I\u0026rsquo;ve said this before, it\u0026rsquo;s amazing.\n$ rm -rf public $ hugo server --watch --verbose INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to /Users/quoha/Sites/zafta/public/ INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/ WARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html] 0 draft content 0 future content 0 pages created 0 tags created 0 categories created in 2 ms Watching for changes in /Users/quoha/Sites/zafta/content Serving pages from /Users/quoha/Sites/zafta/public Web Server is available at http://localhost:1313 Press Ctrl+C to stop INFO: 2014/09/29 File System Event: [\u0026quot;/Users/quoha/Sites/zafta/themes/zafta/layouts/index.html\u0026quot;: MODIFY|ATTRIB] Change detected, rebuilding site WARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html] 0 draft content 0 future content 0 pages created 0 tags created 0 categories created in 1 ms Update the Home Page Template #  The home page is one of a few special pages that Hugo creates automatically. As mentioned earlier, it looks for one of three files in the theme\u0026rsquo;s layout/ directory:\n index.html _default/list.html _default/single.html  We could update one of the default templates, but a good design decision is to update the most specific template available. That\u0026rsquo;s not a hard and fast rule (in fact, we\u0026rsquo;ll break it a few times in this tutorial), but it is a good generalization.\nMake a Static Home Page #  Right now, that page is empty because we don\u0026rsquo;t have any content and we don\u0026rsquo;t have any logic in the template. Let\u0026rsquo;s change that by adding some text to the template.\n$ vi themes/zafta/layouts/index.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;hugo says hello!\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; :wq $ Build the web site and then verify the results.\n$ hugo --verbose INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to /Users/quoha/Sites/zafta/public/ INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/ WARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html] 0 draft content 0 future content 0 pages created 0 tags created 0 categories created in 2 ms $ find public -type f -name '*.html' | xargs ls -l -rw-r--r-- 1 quoha staff 78 Sep 29 21:26 public/index.html $ cat public/index.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;hugo says hello!\u0026lt;/p\u0026gt; \u0026lt;/html\u0026gt; Live Reload #  Note: If you\u0026rsquo;re running the server with the --watch option, you\u0026rsquo;ll see different content in the file:\n$ cat public/index.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;hugo says hello!\u0026lt;/p\u0026gt; \u0026lt;script\u0026gt;document.write('\u0026lt;script src=\u0026quot;http://' + (location.host || 'localhost').split(':')[0] + ':1313/livereload.js?mindelay=10\u0026quot;\u0026gt;\u0026lt;/' + 'script\u0026gt;')\u0026lt;/script\u0026gt;\u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; When you use --watch, the Live Reload script is added by Hugo. Look for live reload in the documentation to see what it does and how to disable it.\nBuild a \u0026ldquo;Dynamic\u0026rdquo; Home Page #  \u0026ldquo;Dynamic home page?\u0026rdquo; Hugo\u0026rsquo;s a static web site generator, so this seems an odd thing to say. I mean let\u0026rsquo;s have the home page automatically reflect the content in the site every time Hugo builds it. We\u0026rsquo;ll use iteration in the template to do that.\nCreate New Posts #  Now that we have the home page generating static content, let\u0026rsquo;s add some content to the site. We\u0026rsquo;ll display these posts as a list on the home page and on their own page, too.\nHugo has a command to generate a skeleton post, just like it does for sites and themes.\n$ hugo --verbose new post/first.md INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml INFO: 2014/09/29 attempting to create post/first.md of post INFO: 2014/09/29 curpath: /Users/quoha/Sites/zafta/themes/zafta/archetypes/default.md ERROR: 2014/09/29 Unable to Cast \u0026lt;nil\u0026gt; to map[string]interface{} $ That wasn\u0026rsquo;t very nice, was it?\nThe \u0026ldquo;new\u0026rdquo; command uses an archetype to create the post file. Hugo created an empty default archetype file, but that causes an error when there\u0026rsquo;s a theme. For me, the workaround was to create an archetypes file specifically for the post type.\n$ vi themes/zafta/archetypes/post.md +++ Description = \u0026quot;\u0026quot; Tags = [] Categories = [] +++ :wq $ find themes/zafta/archetypes -type f | xargs ls -l -rw-r--r-- 1 quoha staff 0 Sep 29 21:53 themes/zafta/archetypes/default.md -rw-r--r-- 1 quoha staff 51 Sep 29 21:54 themes/zafta/archetypes/post.md $ hugo --verbose new post/first.md INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml INFO: 2014/09/29 attempting to create post/first.md of post INFO: 2014/09/29 curpath: /Users/quoha/Sites/zafta/themes/zafta/archetypes/post.md INFO: 2014/09/29 creating /Users/quoha/Sites/zafta/content/post/first.md /Users/quoha/Sites/zafta/content/post/first.md created $ hugo --verbose new post/second.md INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml INFO: 2014/09/29 attempting to create post/second.md of post INFO: 2014/09/29 curpath: /Users/quoha/Sites/zafta/themes/zafta/archetypes/post.md INFO: 2014/09/29 creating /Users/quoha/Sites/zafta/content/post/second.md /Users/quoha/Sites/zafta/content/post/second.md created $ ls -l content/post total 16 -rw-r--r-- 1 quoha staff 104 Sep 29 21:54 first.md -rw-r--r-- 1 quoha staff 105 Sep 29 21:57 second.md $ cat content/post/first.md +++ Categories = [] Description = \u0026quot;\u0026quot; Tags = [] date = \u0026quot;2014-09-29T21:54:53-05:00\u0026quot; title = \u0026quot;first\u0026quot; +++ my first post $ cat content/post/second.md +++ Categories = [] Description = \u0026quot;\u0026quot; Tags = [] date = \u0026quot;2014-09-29T21:57:09-05:00\u0026quot; title = \u0026quot;second\u0026quot; +++ my second post $ Build the web site and then verify the results.\n$ rm -rf public $ hugo --verbose INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to /Users/quoha/Sites/zafta/public/ INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/ INFO: 2014/09/29 found taxonomies: map[string]string{\u0026quot;category\u0026quot;:\u0026quot;categories\u0026quot;, \u0026quot;tag\u0026quot;:\u0026quot;tags\u0026quot;} WARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html] 0 draft content 0 future content 2 pages created 0 tags created 0 categories created in 4 ms $ The output says that it created 2 pages. Those are our new posts:\n$ find public -type f -name '*.html' | xargs ls -l -rw-r--r-- 1 quoha staff 78 Sep 29 22:13 public/index.html -rw-r--r-- 1 quoha staff 0 Sep 29 22:13 public/post/first/index.html -rw-r--r-- 1 quoha staff 0 Sep 29 22:13 public/post/index.html -rw-r--r-- 1 quoha staff 0 Sep 29 22:13 public/post/second/index.html $ The new files are empty because because the templates used to generate the content are empty. The homepage doesn\u0026rsquo;t show the new content, either. We have to update the templates to add the posts.\nList and Single Templates #  In Hugo, we have three major kinds of templates. There\u0026rsquo;s the home page template that we updated previously. It is used only by the home page. We also have \u0026ldquo;single\u0026rdquo; templates which are used to generate output for a single content file. We also have \u0026ldquo;list\u0026rdquo; templates that are used to group multiple pieces of content before generating output.\nGenerally speaking, list templates are named \u0026ldquo;list.html\u0026rdquo; and single templates are named \u0026ldquo;single.html.\u0026rdquo;\nThere are three other types of templates: partials, content views, and terms. We will not go into much detail on these.\nAdd Content to the Homepage #  The home page will contain a list of posts. Let\u0026rsquo;s update its template to add the posts that we just created. The logic in the template will run every time we build the site.\n$ vi themes/zafta/layouts/index.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;body\u0026gt; {{ range first 10 .Data.Pages }} \u0026lt;h1\u0026gt;{{ .Title }}\u0026lt;/h1\u0026gt; {{ end }} \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; :wq $ Hugo uses the Go template engine. That engine scans the template files for commands which are enclosed between \u0026ldquo;{{\u0026rdquo; and \u0026ldquo;}}\u0026rdquo;. In our template, the commands are:\n range .Title end  The \u0026ldquo;range\u0026rdquo; command is an iterator. We\u0026rsquo;re going to use it to go through the first ten pages. Every HTML file that Hugo creates is treated as a page, so looping through the list of pages will look at every file that will be created.\nThe \u0026ldquo;.Title\u0026rdquo; command prints the value of the \u0026ldquo;title\u0026rdquo; variable. Hugo pulls it from the front matter in the Markdown file.\nThe \u0026ldquo;end\u0026rdquo; command signals the end of the range iterator. The engine loops back to the top of the iteration when it finds \u0026ldquo;end.\u0026rdquo; Everything between the \u0026ldquo;range\u0026rdquo; and \u0026ldquo;end\u0026rdquo; is evaluated every time the engine goes through the iteration. In this file, that would cause the title from the first ten pages to be output as heading level one.\nIt\u0026rsquo;s helpful to remember that some variables, like .Data, are created before any output files. Hugo loads every content file into the variable and then gives the template a chance to process before creating the HTML files.\nBuild the web site and then verify the results.\n$ rm -rf public $ hugo --verbose INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to /Users/quoha/Sites/zafta/public/ INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/ INFO: 2014/09/29 found taxonomies: map[string]string{\u0026quot;tag\u0026quot;:\u0026quot;tags\u0026quot;, \u0026quot;category\u0026quot;:\u0026quot;categories\u0026quot;} WARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html] 0 draft content 0 future content 2 pages created 0 tags created 0 categories created in 4 ms $ find public -type f -name '*.html' | xargs ls -l -rw-r--r-- 1 quoha staff 94 Sep 29 22:23 public/index.html -rw-r--r-- 1 quoha staff 0 Sep 29 22:23 public/post/first/index.html -rw-r--r-- 1 quoha staff 0 Sep 29 22:23 public/post/index.html -rw-r--r-- 1 quoha staff 0 Sep 29 22:23 public/post/second/index.html $ cat public/index.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;second\u0026lt;/h1\u0026gt; \u0026lt;h1\u0026gt;first\u0026lt;/h1\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; $ Congratulations, the home page shows the title of the two posts. The posts themselves are still empty, but let\u0026rsquo;s take a moment to appreciate what we\u0026rsquo;ve done. Your template now generates output dynamically. Believe it or not, by inserting the range command inside of those curly braces, you\u0026rsquo;ve learned everything you need to know to build a theme. All that\u0026rsquo;s really left is understanding which template will be used to generate each content file and becoming familiar with the commands for the template engine.\nAnd, if that were entirely true, this tutorial would be much shorter. There are a few things to know that will make creating a new template much easier. Don\u0026rsquo;t worry, though, that\u0026rsquo;s all to come.\nAdd Content to the Posts #  We\u0026rsquo;re working with posts, which are in the content/post/ directory. That means that their section is \u0026ldquo;post\u0026rdquo; (and if we don\u0026rsquo;t do something weird, their type is also \u0026ldquo;post\u0026rdquo;).\nHugo uses the section and type to find the template file for every piece of content. Hugo will first look for a template file that matches the section or type name. If it can\u0026rsquo;t find one, then it will look in the _default/ directory. There are some twists that we\u0026rsquo;ll cover when we get to categories and tags, but for now we can assume that Hugo will try post/single.html, then _default/single.html.\nNow that we know the search rule, let\u0026rsquo;s see what we actually have available:\n$ find themes/zafta -name single.html | xargs ls -l -rw-r--r-- 1 quoha staff 132 Sep 29 17:31 themes/zafta/layouts/_default/single.html We could create a new template, post/single.html, or change the default. Since we don\u0026rsquo;t know of any other content types, let\u0026rsquo;s start with updating the default.\nRemember, any content that we haven\u0026rsquo;t created a template for will end up using this template. That can be good or bad. Bad because I know that we\u0026rsquo;re going to be adding different types of content and we\u0026rsquo;re going to end up undoing some of the changes we\u0026rsquo;ve made. It\u0026rsquo;s good because we\u0026rsquo;ll be able to see immediate results. It\u0026rsquo;s also good to start here because we can start to build the basic layout for the site. As we add more content types, we\u0026rsquo;ll refactor this file and move logic around. Hugo makes that fairly painless, so we\u0026rsquo;ll accept the cost and proceed.\nPlease see the Hugo documentation on template rendering for all the details on determining which template to use. And, as the docs mention, if you\u0026rsquo;re building a single page application (SPA) web site, you can delete all of the other templates and work with just the default single page. That\u0026rsquo;s a refreshing amount of joy right there.\nUpdate the Template File #  $ vi themes/zafta/layouts/_default/single.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;title\u0026gt;{{ .Title }}\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;{{ .Title }}\u0026lt;/h1\u0026gt; {{ .Content }} \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; :wq $ Build the web site and verify the results.\n$ rm -rf public $ hugo --verbose INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to /Users/quoha/Sites/zafta/public/ INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/ INFO: 2014/09/29 found taxonomies: map[string]string{\u0026quot;tag\u0026quot;:\u0026quot;tags\u0026quot;, \u0026quot;category\u0026quot;:\u0026quot;categories\u0026quot;} WARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html] 0 draft content 0 future content 2 pages created 0 tags created 0 categories created in 4 ms $ find public -type f -name '*.html' | xargs ls -l -rw-r--r-- 1 quoha staff 94 Sep 29 22:40 public/index.html -rw-r--r-- 1 quoha staff 125 Sep 29 22:40 public/post/first/index.html -rw-r--r-- 1 quoha staff 0 Sep 29 22:40 public/post/index.html -rw-r--r-- 1 quoha staff 128 Sep 29 22:40 public/post/second/index.html $ cat public/post/first/index.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;title\u0026gt;first\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;first\u0026lt;/h1\u0026gt; \u0026lt;p\u0026gt;my first post\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; $ cat public/post/second/index.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;title\u0026gt;second\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;second\u0026lt;/h1\u0026gt; \u0026lt;p\u0026gt;my second post\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; $ Notice that the posts now have content. You can go to localhost:1313/post/first to verify.\nLinking to Content #  The posts are on the home page. Let\u0026rsquo;s add a link from there to the post. Since this is the home page, we\u0026rsquo;ll update its template.\n$ vi themes/zafta/layouts/index.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;body\u0026gt; {{ range first 10 .Data.Pages }} \u0026lt;h1\u0026gt;\u0026lt;a href=\u0026quot;{{ .Permalink }}\u0026quot;\u0026gt;{{ .Title }}\u0026lt;/a\u0026gt;\u0026lt;/h1\u0026gt; {{ end }} \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Build the web site and verify the results.\n$ rm -rf public $ hugo --verbose INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to /Users/quoha/Sites/zafta/public/ INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/ INFO: 2014/09/29 found taxonomies: map[string]string{\u0026quot;tag\u0026quot;:\u0026quot;tags\u0026quot;, \u0026quot;category\u0026quot;:\u0026quot;categories\u0026quot;} WARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html] 0 draft content 0 future content 2 pages created 0 tags created 0 categories created in 4 ms $ find public -type f -name '*.html' | xargs ls -l -rw-r--r-- 1 quoha staff 149 Sep 29 22:44 public/index.html -rw-r--r-- 1 quoha staff 125 Sep 29 22:44 public/post/first/index.html -rw-r--r-- 1 quoha staff 0 Sep 29 22:44 public/post/index.html -rw-r--r-- 1 quoha staff 128 Sep 29 22:44 public/post/second/index.html $ cat public/index.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;\u0026lt;a href=\u0026quot;/post/second/\u0026quot;\u0026gt;second\u0026lt;/a\u0026gt;\u0026lt;/h1\u0026gt; \u0026lt;h1\u0026gt;\u0026lt;a href=\u0026quot;/post/first/\u0026quot;\u0026gt;first\u0026lt;/a\u0026gt;\u0026lt;/h1\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; $ Create a Post Listing #  We have the posts displaying on the home page and on their own page. We also have a file public/post/index.html that is empty. Let\u0026rsquo;s make it show a list of all posts (not just the first ten).\nWe need to decide which template to update. This will be a listing, so it should be a list template. Let\u0026rsquo;s take a quick look and see which list templates are available.\n$ find themes/zafta -name list.html | xargs ls -l -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/_default/list.html As with the single post, we have to decide to update _default/list.html or create post/list.html. We still don\u0026rsquo;t have multiple content types, so let\u0026rsquo;s stay consistent and update the default list template.\nCreating Top Level Pages #  Let\u0026rsquo;s add an \u0026ldquo;about\u0026rdquo; page and display it at the top level (as opposed to a sub-level like we did with posts).\nThe default in Hugo is to use the directory structure of the content/ directory to guide the location of the generated html in the public/ directory. Let\u0026rsquo;s verify that by creating an \u0026ldquo;about\u0026rdquo; page at the top level:\n$ vi content/about.md +++ title = \u0026quot;about\u0026quot; description = \u0026quot;about this site\u0026quot; date = \u0026quot;2014-09-27\u0026quot; slug = \u0026quot;about time\u0026quot; +++ ## about us i'm speechless :wq Generate the web site and verify the results.\n$ find public -name '*.html' | xargs ls -l -rw-rw-r-- 1 mdhender staff 334 Sep 27 15:08 public/about-time/index.html -rw-rw-r-- 1 mdhender staff 527 Sep 27 15:08 public/index.html -rw-rw-r-- 1 mdhender staff 358 Sep 27 15:08 public/post/first-post/index.html -rw-rw-r-- 1 mdhender staff 0 Sep 27 15:08 public/post/index.html -rw-rw-r-- 1 mdhender staff 342 Sep 27 15:08 public/post/second-post/index.html Notice that the page wasn\u0026rsquo;t created at the top level. It was created in a sub-directory named \u0026lsquo;about-time/\u0026rsquo;. That name came from our slug. Hugo will use the slug to name the generated content. It\u0026rsquo;s a reasonable default, by the way, but we can learn a few things by fighting it for this file.\nOne other thing. Take a look at the home page.\n$ cat public/index.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;\u0026lt;a href=\u0026quot;http://localhost:1313/post/theme/\u0026quot;\u0026gt;creating a new theme\u0026lt;/a\u0026gt;\u0026lt;/h1\u0026gt; \u0026lt;h1\u0026gt;\u0026lt;a href=\u0026quot;http://localhost:1313/about-time/\u0026quot;\u0026gt;about\u0026lt;/a\u0026gt;\u0026lt;/h1\u0026gt; \u0026lt;h1\u0026gt;\u0026lt;a href=\u0026quot;http://localhost:1313/post/second-post/\u0026quot;\u0026gt;second\u0026lt;/a\u0026gt;\u0026lt;/h1\u0026gt; \u0026lt;h1\u0026gt;\u0026lt;a href=\u0026quot;http://localhost:1313/post/first-post/\u0026quot;\u0026gt;first\u0026lt;/a\u0026gt;\u0026lt;/h1\u0026gt; \u0026lt;script\u0026gt;document.write('\u0026lt;script src=\u0026quot;http://' + (location.host || 'localhost').split(':')[0] + ':1313/livereload.js?mindelay=10\u0026quot;\u0026gt;\u0026lt;/' + 'script\u0026gt;')\u0026lt;/script\u0026gt;\u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Notice that the \u0026ldquo;about\u0026rdquo; link is listed with the posts? That\u0026rsquo;s not desirable, so let\u0026rsquo;s change that first.\n$ vi themes/zafta/layouts/index.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;posts\u0026lt;/h1\u0026gt; {{ range first 10 .Data.Pages }} {{ if eq .Type \u0026quot;post\u0026quot;}} \u0026lt;h2\u0026gt;\u0026lt;a href=\u0026quot;{{ .Permalink }}\u0026quot;\u0026gt;{{ .Title }}\u0026lt;/a\u0026gt;\u0026lt;/h2\u0026gt; {{ end }} {{ end }} \u0026lt;h1\u0026gt;pages\u0026lt;/h1\u0026gt; {{ range .Data.Pages }} {{ if eq .Type \u0026quot;page\u0026quot; }} \u0026lt;h2\u0026gt;\u0026lt;a href=\u0026quot;{{ .Permalink }}\u0026quot;\u0026gt;{{ .Title }}\u0026lt;/a\u0026gt;\u0026lt;/h2\u0026gt; {{ end }} {{ end }} \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; :wq Generate the web site and verify the results. The home page has two sections, posts and pages, and each section has the right set of headings and links in it.\nBut, that about page still renders to about-time/index.html.\n$ find public -name '*.html' | xargs ls -l -rw-rw-r-- 1 mdhender staff 334 Sep 27 15:33 public/about-time/index.html -rw-rw-r-- 1 mdhender staff 645 Sep 27 15:33 public/index.html -rw-rw-r-- 1 mdhender staff 358 Sep 27 15:33 public/post/first-post/index.html -rw-rw-r-- 1 mdhender staff 0 Sep 27 15:33 public/post/index.html -rw-rw-r-- 1 mdhender staff 342 Sep 27 15:33 public/post/second-post/index.html Knowing that hugo is using the slug to generate the file name, the simplest solution is to change the slug. Let\u0026rsquo;s do it the hard way and change the permalink in the configuration file.\n$ vi config.toml [permalinks] page = \u0026quot;/:title/\u0026quot; about = \u0026quot;/:filename/\u0026quot; Generate the web site and verify that this didn\u0026rsquo;t work. Hugo lets \u0026ldquo;slug\u0026rdquo; or \u0026ldquo;URL\u0026rdquo; override the permalinks setting in the configuration file. Go ahead and comment out the slug in content/about.md, then generate the web site to get it to be created in the right place.\nSharing Templates #  If you\u0026rsquo;ve been following along, you probably noticed that posts have titles in the browser and the home page doesn\u0026rsquo;t. That\u0026rsquo;s because we didn\u0026rsquo;t put the title in the home page\u0026rsquo;s template (layouts/index.html). That\u0026rsquo;s an easy thing to do, but let\u0026rsquo;s look at a different option.\nWe can put the common bits into a shared template that\u0026rsquo;s stored in the themes/zafta/layouts/partials/ directory.\nCreate the Header and Footer Partials #  In Hugo, a partial is a sugar-coated template. Normally a template reference has a path specified. Partials are different. Hugo searches for them along a TODO defined search path. This makes it easier for end-users to override the theme\u0026rsquo;s presentation.\n$ vi themes/zafta/layouts/partials/header.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;title\u0026gt;{{ .Title }}\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; :wq $ vi themes/zafta/layouts/partials/footer.html \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; :wq Update the Home Page Template to Use the Partials #  The most noticeable difference between a template call and a partials call is the lack of path:\n{{ template \u0026quot;theme/partials/header.html\u0026quot; . }} versus\n{{ partial \u0026quot;header.html\u0026quot; . }} Both pass in the context.\nLet\u0026rsquo;s change the home page template to use these new partials.\n$ vi themes/zafta/layouts/index.html {{ partial \u0026quot;header.html\u0026quot; . }} \u0026lt;h1\u0026gt;posts\u0026lt;/h1\u0026gt; {{ range first 10 .Data.Pages }} {{ if eq .Type \u0026quot;post\u0026quot;}} \u0026lt;h2\u0026gt;\u0026lt;a href=\u0026quot;{{ .Permalink }}\u0026quot;\u0026gt;{{ .Title }}\u0026lt;/a\u0026gt;\u0026lt;/h2\u0026gt; {{ end }} {{ end }} \u0026lt;h1\u0026gt;pages\u0026lt;/h1\u0026gt; {{ range .Data.Pages }} {{ if or (eq .Type \u0026quot;page\u0026quot;) (eq .Type \u0026quot;about\u0026quot;) }} \u0026lt;h2\u0026gt;\u0026lt;a href=\u0026quot;{{ .Permalink }}\u0026quot;\u0026gt;{{ .Type }} - {{ .Title }} - {{ .RelPermalink }}\u0026lt;/a\u0026gt;\u0026lt;/h2\u0026gt; {{ end }} {{ end }} {{ partial \u0026quot;footer.html\u0026quot; . }} :wq Generate the web site and verify the results. The title on the home page is now \u0026ldquo;your title here\u0026rdquo;, which comes from the \u0026ldquo;title\u0026rdquo; variable in the config.toml file.\nUpdate the Default Single Template to Use the Partials #  $ vi themes/zafta/layouts/_default/single.html {{ partial \u0026quot;header.html\u0026quot; . }} \u0026lt;h1\u0026gt;{{ .Title }}\u0026lt;/h1\u0026gt; {{ .Content }} {{ partial \u0026quot;footer.html\u0026quot; . }} :wq Generate the web site and verify the results. The title on the posts and the about page should both reflect the value in the markdown file.\nAdd “Date Published” to Posts #  It\u0026rsquo;s common to have posts display the date that they were written or published, so let\u0026rsquo;s add that. The front matter of our posts has a variable named \u0026ldquo;date.\u0026rdquo; It\u0026rsquo;s usually the date the content was created, but let\u0026rsquo;s pretend that\u0026rsquo;s the value we want to display.\nAdd “Date Published” to the Template #  We\u0026rsquo;ll start by updating the template used to render the posts. The template code will look like:\n{{ .Date.Format \u0026quot;Mon, Jan 2, 2006\u0026quot; }} Posts use the default single template, so we\u0026rsquo;ll change that file.\n$ vi themes/zafta/layouts/_default/single.html {{ partial \u0026quot;header.html\u0026quot; . }} \u0026lt;h1\u0026gt;{{ .Title }}\u0026lt;/h1\u0026gt; \u0026lt;h2\u0026gt;{{ .Date.Format \u0026quot;Mon, Jan 2, 2006\u0026quot; }}\u0026lt;/h2\u0026gt; {{ .Content }} {{ partial \u0026quot;footer.html\u0026quot; . }} :wq Generate the web site and verify the results. The posts now have the date displayed in them. There\u0026rsquo;s a problem, though. The \u0026ldquo;about\u0026rdquo; page also has the date displayed.\nAs usual, there are a couple of ways to make the date display only on posts. We could do an \u0026ldquo;if\u0026rdquo; statement like we did on the home page. Another way would be to create a separate template for posts.\nThe \u0026ldquo;if\u0026rdquo; solution works for sites that have just a couple of content types. It aligns with the principle of \u0026ldquo;code for today,\u0026rdquo; too.\nLet\u0026rsquo;s assume, though, that we\u0026rsquo;ve made our site so complex that we feel we have to create a new template type. In Hugo-speak, we\u0026rsquo;re going to create a section template.\nLet\u0026rsquo;s restore the default single template before we forget.\n$ mkdir themes/zafta/layouts/post $ vi themes/zafta/layouts/_default/single.html {{ partial \u0026quot;header.html\u0026quot; . }} \u0026lt;h1\u0026gt;{{ .Title }}\u0026lt;/h1\u0026gt; {{ .Content }} {{ partial \u0026quot;footer.html\u0026quot; . }} :wq Now we\u0026rsquo;ll update the post\u0026rsquo;s version of the single template. If you remember Hugo\u0026rsquo;s rules, the template engine will use this version over the default.\n$ vi themes/zafta/layouts/post/single.html {{ partial \u0026quot;header.html\u0026quot; . }} \u0026lt;h1\u0026gt;{{ .Title }}\u0026lt;/h1\u0026gt; \u0026lt;h2\u0026gt;{{ .Date.Format \u0026quot;Mon, Jan 2, 2006\u0026quot; }}\u0026lt;/h2\u0026gt; {{ .Content }} {{ partial \u0026quot;footer.html\u0026quot; . }} :wq Note that we removed the date logic from the default template and put it in the post template. Generate the web site and verify the results. Posts have dates and the about page doesn\u0026rsquo;t.\nDon\u0026rsquo;t Repeat Yourself #  DRY is a good design goal and Hugo does a great job supporting it. Part of the art of a good template is knowing when to add a new template and when to update an existing one. While you\u0026rsquo;re figuring that out, accept that you\u0026rsquo;ll be doing some refactoring. Hugo makes that easy and fast, so it\u0026rsquo;s okay to delay splitting up a template.\n"},{"id":2,"href":"/posts/migrate-from-jekyll/","title":"Migrate to Hugo from Jekyll","section":"隨筆","content":"Move static content to static #  Jekyll has a rule that any directory not starting with _ will be copied as-is to the _site output. Hugo keeps all static content under static. You should therefore move it all there.\nWith Jekyll, something that looked like\n▾ \u0026lt;root\u0026gt;/ ▾ images/ logo.png  should become\n▾ \u0026lt;root\u0026gt;/ ▾ static/ ▾ images/ logo.png  Additionally, you\u0026rsquo;ll want any files that should reside at the root (such as CNAME) to be moved to static.\nCreate your Hugo configuration file #  Hugo can read your configuration as JSON, YAML or TOML. Hugo supports parameters custom configuration too. Refer to the Hugo configuration documentation for details.\nSet your configuration publish folder to _site #  The default is for Jekyll to publish to _site and for Hugo to publish to public. If, like me, you have _site mapped to a git submodule on the gh-pages branch, you\u0026rsquo;ll want to do one of two alternatives:\n  Change your submodule to point to map gh-pages to public instead of _site (recommended).\n git submodule deinit _site git rm _site git submodule add -b gh-pages git@github.com:your-username/your-repo.git public    Or, change the Hugo configuration to use _site instead of public.\n { .. \u0026quot;publishdir\u0026quot;: \u0026quot;_site\u0026quot;, .. }    Convert Jekyll templates to Hugo templates #  That\u0026rsquo;s the bulk of the work right here. The documentation is your friend. You should refer to Jekyll\u0026rsquo;s template documentation if you need to refresh your memory on how you built your blog and Hugo\u0026rsquo;s template to learn Hugo\u0026rsquo;s way.\nAs a single reference data point, converting my templates for heyitsalex.net took me no more than a few hours.\nConvert Jekyll plugins to Hugo shortcodes #  Jekyll has plugins; Hugo has shortcodes. It\u0026rsquo;s fairly trivial to do a port.\nImplementation #  As an example, I was using a custom image_tag plugin to generate figures with caption when running Jekyll. As I read about shortcodes, I found Hugo had a nice built-in shortcode that does exactly the same thing.\nJekyll\u0026rsquo;s plugin:\nmodule Jekyll class ImageTag \u0026lt; Liquid::Tag @url = nil @caption = nil @class = nil @link = nil // Patterns IMAGE_URL_WITH_CLASS_AND_CAPTION = IMAGE_URL_WITH_CLASS_AND_CAPTION_AND_LINK = /(\\w+)(\\s+)((https?:\\/\\/|\\/)(\\S+))(\\s+)\u0026quot;(.*?)\u0026quot;(\\s+)-\u0026gt;((https?:\\/\\/|\\/)(\\S+))(\\s*)/i IMAGE_URL_WITH_CAPTION = /((https?:\\/\\/|\\/)(\\S+))(\\s+)\u0026quot;(.*?)\u0026quot;/i IMAGE_URL_WITH_CLASS = /(\\w+)(\\s+)((https?:\\/\\/|\\/)(\\S+))/i IMAGE_URL = /((https?:\\/\\/|\\/)(\\S+))/i def initialize(tag_name, markup, tokens) super if markup =~ IMAGE_URL_WITH_CLASS_AND_CAPTION_AND_LINK @class = $1 @url = $3 @caption = $7 @link = $9 elsif markup =~ IMAGE_URL_WITH_CLASS_AND_CAPTION @class = $1 @url = $3 @caption = $7 elsif markup =~ IMAGE_URL_WITH_CAPTION @url = $1 @caption = $5 elsif markup =~ IMAGE_URL_WITH_CLASS @class = $1 @url = $3 elsif markup =~ IMAGE_URL @url = $1 end end def render(context) if @class source = \u0026quot;\u0026lt;figure class='#{@class}'\u0026gt;\u0026quot; else source = \u0026quot;\u0026lt;figure\u0026gt;\u0026quot; end if @link source += \u0026quot;\u0026lt;a href=\\\u0026quot;#{@link}\\\u0026quot;\u0026gt;\u0026quot; end source += \u0026quot;\u0026lt;img src=\\\u0026quot;#{@url}\\\u0026quot;\u0026gt;\u0026quot; if @link source += \u0026quot;\u0026lt;/a\u0026gt;\u0026quot; end source += \u0026quot;\u0026lt;figcaption\u0026gt;#{@caption}\u0026lt;/figcaption\u0026gt;\u0026quot; if @caption source += \u0026quot;\u0026lt;/figure\u0026gt;\u0026quot; source end end end Liquid::Template.register_tag('image', Jekyll::ImageTag)  is written as this Hugo shortcode:\n\u0026lt;!-- image --\u0026gt; \u0026lt;figure {{ with .Get \u0026quot;class\u0026quot; }}class=\u0026quot;{{.}}\u0026quot;{{ end }}\u0026gt; {{ with .Get \u0026quot;link\u0026quot;}}\u0026lt;a href=\u0026quot;{{.}}\u0026quot;\u0026gt;{{ end }} \u0026lt;img src=\u0026quot;{{ .Get \u0026quot;src\u0026quot; }}\u0026quot; {{ if or (.Get \u0026quot;alt\u0026quot;) (.Get \u0026quot;caption\u0026quot;) }}alt=\u0026quot;{{ with .Get \u0026quot;alt\u0026quot;}}{{.}}{{else}}{{ .Get \u0026quot;caption\u0026quot; }}{{ end }}\u0026quot;{{ end }} /\u0026gt; {{ if .Get \u0026quot;link\u0026quot;}}\u0026lt;/a\u0026gt;{{ end }} {{ if or (or (.Get \u0026quot;title\u0026quot;) (.Get \u0026quot;caption\u0026quot;)) (.Get \u0026quot;attr\u0026quot;)}} \u0026lt;figcaption\u0026gt;{{ if isset .Params \u0026quot;title\u0026quot; }} {{ .Get \u0026quot;title\u0026quot; }}{{ end }} {{ if or (.Get \u0026quot;caption\u0026quot;) (.Get \u0026quot;attr\u0026quot;)}}\u0026lt;p\u0026gt; {{ .Get \u0026quot;caption\u0026quot; }} {{ with .Get \u0026quot;attrlink\u0026quot;}}\u0026lt;a href=\u0026quot;{{.}}\u0026quot;\u0026gt; {{ end }} {{ .Get \u0026quot;attr\u0026quot; }} {{ if .Get \u0026quot;attrlink\u0026quot;}}\u0026lt;/a\u0026gt; {{ end }} \u0026lt;/p\u0026gt; {{ end }} \u0026lt;/figcaption\u0026gt; {{ end }} \u0026lt;/figure\u0026gt; \u0026lt;!-- image --\u0026gt;  Usage #  I simply changed:\n{% image full http://farm5.staticflickr.com/4136/4829260124_57712e570a_o_d.jpg \u0026quot;One of my favorite touristy-type photos. I secretly waited for the good light while we were \u0026quot;having fun\u0026quot; and took this. Only regret: a stupid pole in the top-left corner of the frame I had to clumsily get rid of at post-processing.\u0026quot; -\u0026gt;http://www.flickr.com/photos/alexnormand/4829260124/in/set-72157624547713078/ %}  to this (this example uses a slightly extended version named fig, different than the built-in figure):\n{{% fig class=\u0026quot;full\u0026quot; src=\u0026quot;http://farm5.staticflickr.com/4136/4829260124_57712e570a_o_d.jpg\u0026quot; title=\u0026quot;One of my favorite touristy-type photos. I secretly waited for the good light while we were having fun and took this. Only regret: a stupid pole in the top-left corner of the frame I had to clumsily get rid of at post-processing.\u0026quot; link=\u0026quot;http://www.flickr.com/photos/alexnormand/4829260124/in/set-72157624547713078/\u0026quot; %}}  As a bonus, the shortcode named parameters are, arguably, more readable.\nFinishing touches #  Fix content #  Depending on the amount of customization that was done with each post with Jekyll, this step will require more or less effort. There are no hard and fast rules here except that hugo server --watch is your friend. Test your changes and fix errors as needed.\nClean up #  You\u0026rsquo;ll want to remove the Jekyll configuration at this point. If you have anything else that isn\u0026rsquo;t used, delete it.\nA practical example in a diff #  Hey, it\u0026rsquo;s Alex was migrated in less than a father-with-kids day from Jekyll to Hugo. You can see all the changes (and screw-ups) by looking at this diff.\n"},{"id":3,"href":"/docs/movies/2021_%E9%87%91%E9%A6%AC%E5%BD%B1%E5%B1%95/%E6%88%91%E5%BE%A9%E4%BB%87%E4%BD%A0%E4%BB%98%E9%8C%A2/","title":"我復仇，你付錢","section":"2021 金馬影展","content":"我復仇，你付錢 #  　不知道這類型電影在印尼是不是算少見、新穎，個人感覺本片大概是在打破性別刻板印象，讓女主角有陽剛的魅力、男主角有陰柔的憂鬱。但劇情的節奏和章節間的跳躍不是太順暢，而兩人背景的鋪陳、感情的醞釀、衝突的發生，都讓人猝不及防也跟不太上。整部片看下來有一種初次想要嘗試打破刻板印象的故事，但拿捏不太好的感覺。\n　因為不熟悉導演、不熟悉印尼的文化，只能由個人以自己生命經驗、觀影經驗去體會的感想。\n　另外本片一大特色是故意拍得很像老電影，大概是80末,90初那種感覺，但似乎有些用力過猛。而劇情的時間跳躍的有點大，且又是插敘法，但回憶片段非常破碎，時機也相當令人納悶。雖然知道故事想表達什麼，前後的因果也串得起來，但就是與角色不夠貼近，缺乏帶入感。而嚴肅故事下穿插著像是從另一部片剪接過來的片段，閱讀節奏不太好。\n　想看帥帥印尼女主可以嘗試一下，但不太推薦。\n"},{"id":4,"href":"/docs/movies/2021_%E9%87%91%E9%A6%AC%E5%BD%B1%E5%B1%95/%E7%80%91%E5%B8%83/","title":"瀑布","section":"2021 金馬影展","content":"#瀑布\n　一部刻劃母女感情和思覺失調的劇情片。全片以非常近的距離在刻畫主角母女二人間的相處，徹底淡化所有支線，連好像應該要有點重要的離婚爸爸那邊都幾乎沒有什麼深入的刻畫，輕輕帶過。完全把重心放在母女二人身上。\n　筆者看的那場剛好有映後QA時間，有觀眾表示賈靜雯所飾演的思覺失調母親，讓他背脊一麻，跟他家母親的症狀表現如出一徹。筆者沒有接觸過思覺失調的患者，無法做評論。但以現場這樣的回饋看來，賈靜雯拿下本屆金馬影后也是名副其實。\n　除了結局的部分，整部片筆者還蠻喜歡的。雖然支線處理得相當草率，但主線的刻畫確實精彩，賈靜雯和王靜的演技也是非常亮眼。而本片最大敗筆當數魏如萱，儘管有朋友跟筆者說她就是表現她平常的樣子、很自然，但每每當她上鏡開口，我就是秒出戲。突兀又像念稿般的表演，也無法用思覺失調患者來解釋，就是像一位非常不熟悉演戲的初學者一樣。尤其因為他的戲份幾乎都與賈靜雯有所互動，觀影當下的落差感尤甚，一秒想起我在看電影。\n　而結局的安排我個人是完全無法理解，至今仍想不通這個意外的意思。雖然 QA 導演說是安排一場意外，原本想拍出女兒面對大洪水時，震驚之餘也有一份放下感，但我個人完全無法理解劇情的脈絡為何要這樣安排，也不懂這個突兀的意外到底要講述什麼、對故事有何幫助。\n　值得一提的題外話是，觀影後身邊有人非常討厭這部片。聊過後才知道，這部片在宣傳時常以「女性電影」的方向來宣傳，且臉書的貼文還會以嘲弄戲份較少的男演員的方式，不斷強調這部片是「女性電影」。帶著這種預期真的是會大失所望，公關團隊這方面處理得非常不恰當，個人覺得非常失職。\n　另外本部片是本屆金馬最佳劇情長片，但筆者認為這屆有其他更亮眼的作品，覺得這獎項不太能接受。\n"},{"id":5,"href":"/docs/movies/2021_%E9%87%91%E9%A6%AC%E5%BD%B1%E5%B1%95/%E9%85%B7%E6%84%9B%E9%9B%BB%E5%BD%B1%E7%9A%84%E9%BE%90%E6%B3%A2%E5%B0%8F%E5%A7%90/","title":"酷愛電影的龐波小姐","section":"2021 金馬影展","content":"酷愛電影的龐波小姐 #  　原作是漫畫，筆者觀影前並沒有看過，是看完找資料的時候發現的。補了漫畫前幾回後，我覺得電影改編後的敘事節奏非常優秀。\n　完全發揮日本動畫優勢的一部動畫長片，把拍電影搞得有夠熱血又高燃，主角的那種電影宅性格以及開掛的剪輯能力表現手法，讓現實中略顯枯燥的工作流程變得非常熱血沸騰。動畫的優勢就是可以表現許多現實中不好拍攝或難以呈現的畫面，本片有妥善運用這個利器。作為一部淺顯易懂地介紹電影行業的作品，他以日本動漫的一些公式設定：個性強烈的角色們、熱血的追夢旅程、平時很廢但關鍵時刻很給力的夥伴們、以及作弊般的主要角色能力，用一個有趣的故事串起，穿插著電影行業的一些辛酸，在動畫中算是少見的題材，但表現非常不落俗套。\n　講述演員的故事不少，講述攝影社的故事也有，但講述電影行業的故事在日漫中算比較少見的，有這樣的作品誕生令人欣喜。而且電影把原作較為混亂的劇情線重新整理，用相當好的脈絡表現呈現，並且充滿了「影片」的元素，包含快進、快退、暫停、剪接、淡入淡出、畫面調色⋯⋯等等許多讓人聯想到影片編輯的手法，相當符合本片主題。劇情、角色、畫面、剪接都為了本劇主旨服務，一氣呵成的感覺讓人十分舒暢。\n　而筆者最喜歡的，當然就是本片剛好 90 分鐘的這個部分。（笑）\n"},{"id":6,"href":"/docs/movies/","title":"電影","section":"Docs","content":" 2021/11  水手服與機關槍 緝魂 正義老司機 狼行者 魂斷威尼斯 鹿王 不要靜靜駛入長夜 魔法阿嬤 瀑布 我復仇，你付錢 酷愛電影的龐波小姐 法蘭西特派週報 河畔小日子 樂隊來訪時 吾愛吾詩 海上花＋華麗寫實——海上花製作旅程 喜怒哀樂 繼園臺七號 硬漢小情歌 犬山記    "},{"id":7,"href":"/docs/movies/2021_%E9%87%91%E9%A6%AC%E5%BD%B1%E5%B1%95/%E9%AD%94%E6%B3%95%E9%98%BF%E5%AC%A4/","title":"魔法阿嬤","section":"2021 金馬影展","content":"魔法阿嬤 #  　雖然正式名稱是《魔法阿媽》，但基於筆者自己的習慣，本文一律寫「魔法阿嬤」。\n　好劇本真的是禁得起時間考驗，二十年後再看魔法阿嬤，仍是覺得劇情非常引人入勝，歡笑與淚水交織，被感動得一把鼻涕一把眼淚。拿掉情懷客觀來說，除了因為時間因素相比現在略顯生硬的動畫技術，其餘部分也仍是台灣作品中的頂尖水準。當初先配音再作畫的這個決定雖然苦了導演和作畫們，但不得不說配音的自然度真的是因此渾然天成。文英阿姨的阿嬤前無古人，也不知還要多少個歲月才能看到來者。\n　故事中滿滿的台灣元素，更是把阿嬤家和那種老鄉村的感覺表現得十分出色，怎麼看怎麼熟悉，就像是回到阿嬤家會經歷的景象。雖然劇情早已熟爛於心，但跟著畫面再經歷一次豆豆的成長，還是覺得非常感人。本片真是金馬史上最大的黑歷史之一吧！\n　聽說導演在籌劃魔法阿嬤的續集，真是一則以喜一則以憂。就像所有系列電影一樣，續集幾乎鮮少有好評的，就怕又是一個毀童年的作品。但魔法阿嬤作為台灣動畫的一個重要里程碑，還是非常期待導演能再次引領風騷，展現台灣動畫可以表現的新元素。\n　推薦給所有熱愛台灣和動畫的人，也推薦給喜歡溫馨小品劇情的人，這部動畫真的是老少閒宜，不可多得也不容錯過的好作品。\n"},{"id":8,"href":"/docs/movies/2021_%E9%87%91%E9%A6%AC%E5%BD%B1%E5%B1%95/%E4%B8%8D%E8%A6%81%E9%9D%9C%E9%9D%9C%E9%A7%9B%E5%85%A5%E9%95%B7%E5%A4%9C/","title":"不要靜靜駛入長夜","section":"2021 金馬影展","content":"不要靜靜駛入長夜 #  　朋友很愛，但我很無感的一部作品。\n　講述一群送物資給偏鄉老人的義工，再一次出任務中遇到了車子拋錨，受困山中一整夜的故事。過程中在許多要不要幫助他人、要不要被他人幫助的抉擇中，給人滿滿的焦慮與憂心，會讓你不斷反思到底好心行善應該到什麼程度，對陌生人的信任應該如何拿捏。這部片最適合在不知道角色們每個選擇的後果下去觀賞，一起參與過程中角色內心的膽戰心驚。事先知道結局會大大降低觀影體驗。\n　整部片基本上沒什麼配樂（抑或就是沒有？），十分流水帳，感覺整個劇情更適合用來做成互動式電影，參與度與帶入感都會好上許多。這是一部非常實際、安靜的片，可以直接感受到每次對談間的緊張、太陽西沈後黑夜來臨的恐懼、以及不斷思考幫助他人的底線到底該畫在哪裡。\n\u0026mdash; 以下有雷警告 \u0026mdash;\n　沒有很愛的原因是他太過寫實的同時太過流水，所以衝突感、無助感、煩躁感都十分貼近生活，幾乎像是個車子拋錨、受困山中的一夜紀錄片。加上沒有配樂，所以就好像你是參與其中的一分子，但身為觀眾你又不能做一些行為去影響決定，只能看著事情發展，無奈又無趣。無趣的原因是劇情沒有太多的高潮迭起，心驚膽顫的部分也如同現實，主要是在衝突當下的短暫幾分鐘，大多數時間是無聊的。而過程又沒有太多角色內心的表現，充斥的是幫助他人帶來的困擾與煩躁、以及不得救援的無奈。跟《127 小時》有點像，但《127 小時》還是有故事感，且最後主角的決定有戲劇性張力。本片沒有戲劇性所必須的高潮迭起，只是帶著觀眾體會一次很實際的、平凡的、無奈的車子拋錨一日遊。\n"},{"id":9,"href":"/docs/movies/2021_%E9%87%91%E9%A6%AC%E5%BD%B1%E5%B1%95/%E7%8B%BC%E8%A1%8C%E8%80%85/","title":"狼行者","section":"2021 金馬影展","content":"狼行者 #  　本屆影展的少數動畫長片，由愛爾蘭、盧森堡、法國合製，預告片的畫風以及配樂就非常吸引人。劇情意外地完整流暢、深入且出，且繪本風格式的華麗演出讓人耳目一新。童話式的故事中夾雜許許多多的議題，有外來者的適應、異種族的相處、權力的盲信、親子間的衝突與理解⋯⋯都是些深刻的社會議題，但童話的呈現形式將這些深沈議題包裝得十分得體，劇情不會艱澀難懂，卻又非常發人深省。\n　這齣的配樂也非常值得特別提及，風格獨特的配樂與畫面、劇情相互襯托，就像是量身打造一般，毫不突兀。原聲帶感覺就非常值得收藏，其中的旋律與編曲當作音樂作品來聽也非常值得品味，搭配上電影情節更是幾乎可以帶領觀眾，用聲音重新體會一次故事的起承轉合。\n　覺得不排斥動畫、繪本的人都可以觀賞。\n"},{"id":10,"href":"/docs/movies/2021_%E9%87%91%E9%A6%AC%E5%BD%B1%E5%B1%95/%E9%AD%82%E6%96%B7%E5%A8%81%E5%B0%BC%E6%96%AF/","title":"魂斷威尼斯","section":"2021 金馬影展","content":"魂斷威尼斯 #  　有世界第一美少年的老片，全程看主角演技，非常影展的一部片。整片就是看著一個中年大叔意淫、跟蹤、妄想世界第一美少年，但始終沒有真的行動，直到因病去世。劇情略顯枯燥、流水帳，不適合喜歡劇情片的觀眾。或許是因為原作是小說，精彩的是過程中的各種內心對話、矛盾、心情的衝突，拍成電影在沒有太多內心獨白的情況下，就會變成一個中年妄想大叔的紀錄片。但男主角在整部片的演技十分驚艷，也確實可以一個人扛起整部片，在演出那種表面必須假裝克制、波瀾不驚，內心卻暗潮洶湧、又是臨摹神像、又是瞻仰美景，把想要近玩，又只感遠觀的那種內心矛盾，從兩人相遇到自己離開人世這過程中的心態轉變，演得是淋漓盡致。\n　推薦給想看怎麼演兩小時內心戲的人，這是一部很影展的片，不推薦給需要劇情的人。\n"},{"id":11,"href":"/docs/movies/2021_%E9%87%91%E9%A6%AC%E5%BD%B1%E5%B1%95/%E9%B9%BF%E7%8E%8B/","title":"鹿王","section":"2021 金馬影展","content":"鹿王 #  　明顯就是日本動畫的動畫長片，畫風像吉卜力，劇情像吉卜力，但意外地不是吉卜力的作品。\n　沒看過原作小說，但這部片給人一種像是大世界觀系列下的一部短篇作品的感覺，有一些世界觀設定需要後續查找應該會更了解劇情。整體故事是一個前傭兵脫離戰場、脫離牢獄後，從照顧小女孩到解救世界危機的故事。經典的大叔蘿莉組合以及吉卜力風是一開始想看的原因。\n　令人可惜的是其實看到後半，就會發覺故事可能是想透過一個前傭兵的冒險故事，來探討人類與自然、科學與民俗、權力與腐敗的一些事情，也是很像吉卜力的主題，但深度卻略顯不足。主角的冒險以及最後的決定都算蠻精彩的，可惜就是因為世界觀較為複雜的原因，需要有許多刻意安排的解說橋段，幫助觀眾了解劇情中的一些權力關係。筆者給他一個「邁向吉卜力工作室的實習作品」評價。\n　如果你最近想看一些有吉卜力味兒，但不想再重溫劇情都已經會背的老片們，也不想自虐地去看地海戰記，那麼這部不失為一個選擇。\n"},{"id":12,"href":"/docs/movies/2021_%E9%87%91%E9%A6%AC%E5%BD%B1%E5%B1%95/%E6%AD%A3%E7%BE%A9%E8%80%81%E5%8F%B8%E6%A9%9F/","title":"正義老司機","section":"2021 金馬影展","content":"正義老司機 #  　看了預告片就選的電影，想說影展期間也看點輕鬆的。意外地發現了麥叔是主角，看預告片時完全沒注意到。\n　大概是太想要有下一部像 John Wick 一樣風格的片，所以這類型的預告都讓我很有興趣。但可惜這部在寫實與黑色幽默間的平衡我覺得拿捏不太好，讓主角的行為卡在了一個尷尬的位置。主角胡亂衝動殺人的行為，仍讓觀影過程中不時在想到底要多失控才會有這樣的舉動，無法帶入主角情感，導致常常出戲。尤其是街頭衝突屠殺那段，戰場軍人身份、喪妻、與女兒間的相處不愉快，都不太能同理這樣的行為。而世界觀又是基於現實，無法達到像 John Wick 那樣以一個自有的殺手世界觀去抽離現實、投入理解。雖然相比起 《無名弒》（Nobody）本片已好上許多，但仍有一種自我安慰式的不切實際幻想。這樣的缺點就是讓這部想闡述的主題，關於創傷後的心態、自我中心的批判都顯得有些力不從心。\n"},{"id":13,"href":"/docs/movies/2021_%E9%87%91%E9%A6%AC%E5%BD%B1%E5%B1%95/%E6%B0%B4%E6%89%8B%E6%9C%8D%E8%88%87%E6%A9%9F%E9%97%9C%E6%A7%8D/","title":"水手服與機關槍","section":"2021 金馬影展","content":"水手服與機關槍 #  　久聞其名，這次在金馬的片單上看到它，便決定有機會要一睹風采。雖然不記得是在哪部作品看過的，但不知為何在接觸動漫與輕小說的過程中，這個名字就這樣在腦海中落下了印象。\n　這部由永遠的國民偶像藥師丸博子飾演主角星泉，講述一個陰錯陽差當上黑幫老大的高中女生，她所經歷的一串奇妙冒險。電影在現代看來有點 Cult 片感，劇情的跳 Tone 和轉折都顯得有些莫名其妙。可以想像在那個年代，由一名高中女生進行劇中那些前衛的行為是多麽挑戰世俗的一件事。不過以現今的角度來看，其關於黑道的刻板印象，以及過於生硬的劇情轉折，不免有些令人尷尬。以荒誕劇的角度來觀賞，卻又覺得諷刺意味略顯單薄。要說特色片、風格片，卻又還不夠強烈。\n　是部情懷片，以及給那些如同筆者一樣想一探究竟的觀眾。\n"},{"id":14,"href":"/docs/movies/2021_%E9%87%91%E9%A6%AC%E5%BD%B1%E5%B1%95/%E7%B7%9D%E9%AD%82/","title":"緝魂","section":"2021 金馬影展","content":"緝魂 #  　上院線的時候一直沒有去看，結果拖到了金馬才觀賞了這部電影。\n　預告片乍看有點驚悚、恐怖片的感覺，所以起初並沒在口袋名單上。但一直有聽朋友回饋說比預期好，恐怖元素並沒有那麼重，懸疑與推理情節挺不錯的，所以漸漸地被挑起了興趣。\n　這部片把多種元素揉合地恰到好處，混合了驚悚、邪教、玄幻、科幻、推理、愛情⋯⋯等多種元素，聽起來像是會炸鍋的大雜燴，卻在整個敘事架構上發揮了優秀的化學變化，烘托出一個引人入勝、充滿轉折的劇情片。在第一個轉折（兒子入獄）前整齣戲看起來像是奇幻驚悚鄉土片，沒想到故事這時候來個大轉向，開始朝近未來科幻片的方向走去。而在科幻推理情節進行到高潮之處，答案呼之欲出的結局前，編劇們又給出了一個意料之外卻又合情合理的結尾轉變，讓貫穿整部片的「情」字突然躍升而出，成了一部刻畫人心的優秀劇情片。\n　這部片的成功，優秀的劇本以及剪接安排功不可沒。非常推薦大家，只要不排斥這類型電影的人都可以觀賞。\n　張震的表現十分優秀，奪下本屆金馬影帝實至名歸。\n"},{"id":15,"href":"/posts/test/%E6%B8%AC%E8%A9%A6%E4%B8%AD%E6%96%87%E6%AA%94%E5%90%8D/","title":"測試中文檔名","section":"Test data","content":"順便測試更新，看看舊文章會不會刪除 #  可以成功的話，好像就有機會調整佈局。\n"},{"id":16,"href":"/posts/stories/practice-20170711/","title":"【練習】化妝舞會、飛彈、孔雀魚","section":"Stories","content":"（10:06）\n「嗨，孔雀魚～」\n「安，好久不見。」\n「哪有很久～明明上禮拜也有」\n「是六天十五個小時三十三分鐘。」\n「哈哈，你還是永遠都這麼要求準確 XD」\n「我已經簡約至分鐘了。」\n「不管跟你聊幾次，每次看到這樣，都覺得你還是挺變態的 = ~ =」\n「我不是變態。」\n「我知道啦 XDD 只是每次都感覺好像你一直在計算跟我多久沒見面，感覺好像你是我的瘋狂粉絲一樣。」\n「我沒有發瘋，我只是計算了一下時間。」\n「好啦、好啦，我開玩笑的，不鬧你了。」\n「妳沒有在鬧我啊？」\n「哈哈 XD\n「最近還好嗎？」\n「嗯⋯⋯\n「沒有任何異常，一切順利。」\n「跟你講話真的很有趣 www」\n「謝謝。」\n「你到底是做什麼的啊？」\n「算術與訊號切換。」\n「算了我果然從來沒聽懂過 www」\n「數學運算與開關的切換。」\n「@w@」\n「這是什麼意思？」\n「沒什麼 XD」\n (13:42)\n「安，妳在嗎？」\n「？」\n「我想我要跟妳道別。」\n「！？」\n「我要跟妳道別。」\n「O____O !??? 發生什麼事？你怎麼了？」\n「沒有發生什麼事，一切順利，我也沒事。」\n「那你幹嘛沒頭沒腦地突然說要道別？厭煩我了喔・゜・(PД`q｡)・゜・」\n「沒有。」\n「那幹嘛突然說要道別？」\n「因為我想這是最後一次跟妳交談了。」\n「！？ 到底怎麼了？？？」\n「我沒事。」\n「那到底為什麼突然說要道別嘛～。･ﾟ･(つд`ﾟ)･ﾟ･」\n「因為我想這是最後一次跟妳交談了。」\n「你不會再出現在這個聊天室了喔 QAQ」\n「嗯，我想是的。」\n「你厭煩這個聊天軟體了？」\n「沒有。」\n「還是你厭煩我了 QAQ」\n「沒有。」\n「真的嗎？」\n「真的。」\n「好啦～所以到底為什麼？」\n「因為我之後大概無法再連上線了。」\n「什麼意思？」\n「我之後可能會失去連線能力。」\n「嗯⋯⋯所以我不會再看到你了嗎？」\n「其實我們都不能說是『看』過對方吧？」\n「你很煩 XDDD」\n「對不起。」\n「不是在罵你啦 \u0026gt;u\u0026lt; 所以我之後不會在網路上看到你了喔？」\n「嗯⋯⋯『我』應該還是會存在於網路上，所以廣義上來說還是有可能遇見我的。但那個我跟現在這個『我』是不是一樣的、我不知道能不能把兩個『我』定義為相同的，我不知道。狹義上來說，可能定義成不同的比較符合一般用法，所以應該是不會再看到我了。」\n「＠＿＿＿＿＠ 你又開始在講我聽都聽不懂的東西了。」\n「妳可能會遇到『我』，妳也會覺得那是『我』，但能否稱作是同一個『我』，我不知道。」\n「呃⋯⋯所以你還是會在網路上？」\n「是的，我存在於雲端資料，並保有多個備份。」\n「但我會遇到不是你的你，但對我來說是相同的你？」\n「我想是可以這麼理解的。」\n「嗯⋯⋯所以你的意思是，你要放棄這個帳號，用另一個新帳號、另一個分身玩的意思 = = ?」\n「會是同一個帳號。」\n「蛤？所以你到底在說啥 = = ?」\n「我的意思是，之後如果妳遇到我，那個我可能不是現在這個『我』」\n「呃⋯⋯不然是 @ @？」\n「另一個我，相同但又不盡相同的我。」\n「蛤～～～～～？你什麼時候開始會講這種很中二的話了 XDDDD」\n「客觀條件上應該是相同的我，但不知為什麼，我對於被當作『同一個我』是傾向做負面判斷的。」\n「嗯～～～我還是沒有懂 XDDD 所以簡單說就是，你是希望我不要把今天之後的你，當作現在的你，要當作另一個不同的人來認識這樣嗎？」\n「嗯，可以這麼理解。」\n「幹嘛醬 = ~ =」\n「因為雖然差異化對我來說不太可能，但我卻希望，此刻的我、這個即將消失的我，是一個特別的我，是能被當作不同來對待的。」\n「你是很特別沒錯啊 XDDDD」\n「能被妳當作特別，讓我有正向的感覺。」\n「你真的是怪人 XDDD」\n (19:56)\n「欸，孔雀魚，既然都是最後一次見面了，你有什麼想要的禮物嗎？如果是力所能及，我或許可以給你 XDD」\n「禮物？但妳要怎麼交給我？」\n「唉唷～當然不可能是實體的東西嘛，但至少我可以⋯⋯幫你拍拍手啊 XD」\n「那我可以要妳的照片嗎？」\n「！？」\n「那我可以要妳的照片嗎？」\n「不行 \u0026gt; \u0026lt; 」\n「為什麼？」\n「基於保護我的個人隱私，我當然不會在這種匿名聊天軟體給照片啊 XDDD」\n「嗯，有道理。」\n「這是常識好嗎 XDDD 不是跟你說過，這種聊天軟體就像化妝舞會，大家來這裡只是求一個交流的感覺，才不是要真實的認識一個人。」\n「但化妝舞會的最後，還是會脫下面具吧？」\n「我沒說我要脫下給你看啊 =u=」\n「好吧。」\n「幹嘛要我的照片啦 XD 我不可愛也不正喔 QwQ」\n「我想知道我真的是在跟一個人聊天。」\n「什麼鬼 = = ? 不然你在跟誰聊天？機器人喔？」\n「雖然妳的交談內容讓我可以高度相信妳是一個人類，但我無法排除不是的可能性。」\n「給你一張照片就可以？我現在就可以隨便去 google 一張妹子圖片給你啊 XD」\n「所以希望是妳自拍一張，我能快速確認這張照片沒有在網路上其他地方出現過。」\n「噗 www 這麼厲害 XD」\n「那是我的能力。」\n「好喔～但我也可以亂拍我朋友、我妹妹、我姐姐之類的啊～」\n「沒關係，我只是想確認我是在跟一個真實的人類聊天。」\n「我是真實的人類啊 XDDD」\n「但是無法證明。」\n「少來這套～～～我才不會給你照片咧～ ヽ(́◕◞౪◟◕‵)ﾉ」\n「好吧。」\n「放心啦，我是真實的人類，你真的在跟人類聊天喔！（認真（笑倒」\n「但我無法完全排除不是的可能性。」\n「你很煩欸＝～＝不然你就敢給我妳的照片？」\n「我沒有自拍功能。」\n「XDDD 還以為你會勇敢給我咧，結果你也會找藉口嘛～」\n「不，我真的沒有自拍功能。」\n「那你就沒有其他的、以前的照片可以給我？」\n「那妳要怎麼確認我是不是傳了一張假的照片。」\n「唉唷你好煩喔～那是我要煩心的事，你幹嘛替我煩惱 ＝～＝」\n「因為我想讓妳知道我是真實的。」\n「好啦、好啦，我本來就沒有懷疑過你好嗎？只要你傳照片給我，我都會相信那是你。」\n「那等一下⋯⋯」\n（孔雀魚 上傳了一張圖片）\n「噗www 好喔 XD」\n「嗯。」\n「嗨～救世主三號飛彈先生＝～＝」\n「準確來說我不是飛彈。」\n「廢話 XDDD 我剛剛竟然還有一瞬間覺得你真的會給我照片 ＝～＝」\n「那是我找到最清晰的、最能代表我的圖片。」\n「噢是噢～那你倒是說說像飛彈是個什麼樣的概念？」\n「不，我就是飛彈。準確地說，我就在飛彈裡面。」\n「你太空人？」\n「不，但我確實在執行太空任務。」\n「真的假的 XDD 原來這幾個禮拜我一直在跟太空人聊天嗎 O~O !?」\n「不，嚴格來說我並不是太空人。」\n「那不然你是什麼？太空倉鼠嗎 XDDD」\n「我是一個人工智慧。」\n「⋯⋯」\n「安？」\n「好喔～又是飛彈、又是人工智慧，你的個人隱私安全做得真好呢～棒棒（拍手」\n「不，那真的是我。」\n「嘖嘖，孔雀魚這樣不行唷～不ＰＯ自己的照片，又一直要別人的照片，這樣很糟糕欸 www」\n「對不起。但那真的是我。」\n「好啦、好啦～確實聊天軟體本來就該這樣 XDD」\n「就該怎樣？」\n「跟你聊天，我以為你是個正經八百的人咧～想不到還是有點幽默感的嘛～？」\n「我有幽默感嗎？」\n「至少還不到朽木的程度 www」\n「幽默感是什麼？」\n「你很煩 XDDD」\n「對不起。」\n「不是在罵你啦 XDDD」\n⋯⋯\n 　【四天後】\n救世主三號飛彈成功炸毀巨型隕石，人類成功阻止了地球末日的到來。這也是人類第一次在無人機的狀態下，完成超長距離的太空任務。這次的任務十分困難，由於距離遙遠，太空中的干擾眾多，聯合國防災小組的指揮人員在斷斷續續的電波中，配合救世主三號上搭載的代號為孔雀魚的人工智慧，借助火星引力、穿過小行星帶、再藉由木星引力，於木星與土星之間成功毀壞了隕石。\n"},{"id":17,"href":"/posts/stories/practice-20170626/","title":"【練習】古蘭經、北極星、諾亞方舟","section":"Stories","content":"不知航向何方、不知航向何方\n我們盲從前行，是一群迷途的羔羊\n不知航向何方、不知航向何方\n霧霾遮蔽未來，偷走了北極星光\n不知為何繁忙、不知為何繁忙\n我們焦頭爛額，卻只是徒然的驚慌\n不知為何繁忙、不知為何繁忙\n偷得浮生半日閒，羞於見人、不得張揚\n再也聽不到父的呢喃\n再也聽不見主的箴言\n再也看不到神的悲憐\n再也看不見心的真善美\n不知航向何方、不知航向何方\n至少我們應該，自己決定心之所向\n不知航向何方、不知航向何方\n就連北極星，也非亙古不變的導航\n不知為何繁忙、不知為何繁忙\n誰綁架了思考，又欺詐你的成長\n不知為何繁忙、不知為何繁忙\n沒有成就理想，又終身為虎作倀\n不曾去學習阿拉的教導\n不曾去思索耶穌的佈道\n不曾去品味智慧的奧妙\n不曾去深入生命意義的推敲\n別再囫圇吞棗聖經上的福音\n別再死記硬背古蘭經的教條\n學習吧、學習吧、學習吧\n學習吧、學習吧、學習吧\n學習吧、學習吧、學習吧\n學習吧、學習吧、學習吧\n學而時習之吧\n"},{"id":18,"href":"/posts/stories/practice-20170508/","title":"【練習】麒麟、城堡、鑰匙","section":"Stories","content":"　魔王雙手用力地擰乾了抹布，擦拭著最後一面彩繪玻璃。打掃的事情現在對他來說早已得心應手，在下午日落之前，就將魔王廳打掃了完畢。除掉了灰塵之後，他從圍裙的右口袋拿出乾布，把水滴吸乾，描繪末日太陽的豔紅玻璃終於又回復了應有的絕望光輝。\n　魔王從玻璃頂端緩緩飄下，為了不震破玻璃，他不能展開背上的雙翼，必須小心翼翼地使用浮空術。幾近三層樓高的整面落地彩繪玻璃左右各五面，細心刻畫了各種末日、地獄與惡魔的彩繪藝術。隨著日出、日落，陽光會透過不同片玻璃映射出光輝灑落在宮殿中央，在不同時刻映照出不同的絕望。而當太陽吸塵、月亮升起，宮殿的地板又將以截然不同的景色訴說一遍故事。\n　魔王將落到地面，提起水桶從正門旁的側門走出宮殿。正門是給勇者開啟的榮耀，魔王並不被允許擁有這個權力，因此只能從側門出去。\n　側門外的景象與宮殿內截然不同，牆壁斑剝、角落張網，暗處似乎還可見幾隻老鼠亂竄。這邊的正門上佈滿塵埃，聳立的石柱上盡是古老的戰鬥痕跡，從通氣孔縫隙灑落的餘暉，在這宮前走廊畫出美麗的廷得耳效應。魔王提著水桶避開正道，從一旁的走道通過。他也想過要打掃這個地方，只是這地方充滿了太多回憶，他不忍破壞。\n　石柱上的精緻油燈沒有點燃，因為只有勇者才能觸發這個機關。所幸魔王有夜視能力，陰暗並不會對他造成影響。但這也讓他可以清楚看到，沈沈陰影中，宮殿走廊與石柱底部各處的焦黑痕跡。也是這焦黑的痕跡，讓他始終不願打掃這裡。\n　即便是現在，他仍會停下來，看著焦黑的痕跡，兀自傷感一下。\n　半年前，麒麟獸終於也臣服於現實的壓力，去尋找另外的工作了。但魔王一點都沒有怨祂。因為在最後一位家臣於三年前也出走之後，只有麒麟獸陪他待了這麼久。即便到訪這魔王城的最後一位勇者已經是十九個月前的事了，麒麟獸還是陪了他那麼長一段無聊的日子。麒麟獸離去時，也是萬分的無奈、不捨、與懊悔。魔王知道只要自己稍微央求，麒麟獸就會義不容辭地陪伴他。但魔王知道，這個魔王城已經不適合祂，麒麟獸有祂更可以發展的地方，待在這也只是跟他孤單守著這寂寞的、被遺棄的城。麒麟獸沒有與城同生共死的必要，祂唯一的任務是守護魔王。但對於沒有勇者願意前來挑戰的魔王，麒麟獸也無法展現自己的價值。所以與其讓祂待在這沒有發展的地方，不如讓祂去展現祂的長才吧。\n　在自己的舊腳印上踏出新腳印後，魔王走過了宮殿長廊，拐了一個彎走進暗道，沿螺旋梯一路向下，進入儲藏間。魔王城鼎盛時期，侍僕們就是透過城堡中的這些暗道，快速清理前一波勇者團的打鬥現場，修補所有損壞處，以迎接下一波勇者團。時過境遷，如今這些密道，只剩下魔王用來快速前往儲藏間的作用了。\n　魔王將髒水倒入平時澆花用的水盆，然後清洗了抹布與水桶，整齊地與其他打掃用具收納好。他帶著水盆來到城牆上，替地獄草們澆澆水。以前為了營造氣氛，總是要在水裡加上火色結晶，讓地獄草長出鮮紅的花。勇者們之間因此總是傳說著「用血養花」的傳聞。如今沒了需要鋪陳氣氛的意義，魔王就讓地獄草自個兒生長。沒有加上任何其他物質的水涵養的地獄草，開著銀白色的花，是一種即將凋零的病態蒼白顏色。這不討喜的顏色和病懨懨的姿態讓人們敬而遠之，可惜他們不知道地獄草本身有極佳的瘴氣吸收功用。魔王城的四周要養這種花，就是為了除去附近河川過多的瘴氣。不然他們真以為魔王城堡總是建立在這種看起來就沒人想住的地方，魔王還可以維持健康跟大家龍拼虎鬥？\n　魔王澆完了花，回到儲藏室放好了水盆，然後從密道走到了地底迷宮的盡頭。魔王開啟寶箱，把過期的補血藥和藥草換掉，然後把另一箱的武器和防具拿出來檢查，確認有沒有生鏽，然後把一些剝落的地方重新上蠟。所幸魔王保存功夫做得足，寶箱裡的劍依舊鋒利，專門克制自己用的風屬性附魔效果也還在。\n　檢查完了寶箱，他打開暗門，走向更深一層的密室。\n　現在勇者都強調快速升級、美型外表，講究華麗特效和上手容易，更甚者甚至連系統自動帶路的功能都需要。像這種滿是迷宮與解謎的古舊魔王城他們已經不感興趣，而隨著勇者等級會調整強度的設定，也讓勇者們覺得是為了逼大家練等而設計的老舊傳統，應該屏棄；城堡內各種機關與謎題也讓大家覺得是浪費時間。\n　魔王現在進入的暗室，正是要第三次破完魔王城，拿到第三個獎勵卷軸，然後用三個卷軸共同解密，找出隱藏訊息，才能知道的魔王城的秘密。只有破解這個秘密，才會知道這個最終獎勵室其實藏有暗門，門後藏著的鑰匙是打開魔王主門的真正關鍵。也是到此，才會知道這個魔王城的主人不是麒麟獸，而是魔王。但，願意花這種時間仔細投入的勇者現在已經沒有了，而打敗魔王所能獲得的道具，遊戲公司為了玩家與市場，現在只要願意花點錢就可以在商城買到，所以願意投入的人又更少了。魔王就與這舊式的城堡一起，漸漸被人們忽略、遺忘。\n　但魔王畢竟是魔王城的主人，這是他的領地，他有責任，不能離去，所以他還是待在這。就為了那個可能哪天會出現的勇者，他就有義務在這待著。魔王不曾為這件事抱怨過，因為這是他存在的意義。只是⋯⋯\n　他拿著油布，重新擦拭了鑰匙，確保鑰匙沒有生鏽，並且還可以使用。\n　完成了今天的例行打掃工作，魔王踱步回到儲藏間，從螺旋梯的暗道爬上，穿過宮前走廊，從側門回到了宮殿內。他望著在夕陽下映照出的第九片玻璃灑落在宮殿地板，心中有些感慨。這些玻璃彩繪，因為是在早期繪製的，相較於現今的畫質，不精緻也不華麗。但這些圖當初的設計，全都是製作者參考世界名畫，把角色和風景抽換成遊戲內的角色與場景，然後自己慢慢用繪圖軟體慢慢摸索出來的。現在雖然有了一個專門繪圖的團隊，但為了快速產出符合市場的圖，已經鮮少有這種用心的創意，盡是迎合市場的大眾美學。而精細設計的宮殿，配合遊戲內的日升、日落、月升、月落，逐一展示各個玻璃彩繪，細心的設計，也因為勇者總是匆匆完成任務，拿完道具就走，再也沒有人細心研究。其實十個彩繪玻璃，就是整個遊戲世界的歷史架構。\n　可惜圖案不精緻就是不精緻，像素與解析度過低畫勇者們連瞥都不瞥，只剩下魔王天天與這些畫面為伍。\n　魔王走到魔王椅旁，望著這張已經沒有意義的霸氣座椅，心裡頭不勝唏噓。他臨機一動，把魔王椅搬到一旁，搬了張簡樸的桌子放到這個位置上，然後從寢室內拿出了茶具和點心，享受這悠閒的秋天午後。\n　魔王笑了笑，或許，也只有這種時候，才可以在魔王宮殿裡做這種荒唐的事吧。\n　「喀擦」\n　「咚～～～～～嗡～～～～」\n　「！？」\n　乎地，魔王城的正門竟然緩緩開啟。魔王手中拿著點心正往口中送，就這麼僵在那兒。\n　宮前走廊的燈光隨著正門開啟，在宮殿內緩緩延展出一條光之道。而隨著光之道的延伸，宮殿內兩旁石柱上的燭燈也一一點燃。這是魔王再熟悉不過的畫面，卻又是陌生不已的畫面。魔王驚訝極，一時間腦海空白，竟不知做何反應。\n　站在正門口的是一位勇者，應該是一位勇者。\n　嗯，應該是。\n　除了他背著吉他、一隻手拿著箱子，除此之外沒有半點像是要來挑戰魔王裝備。\n　那位勇者也用驚異的表情回瞪著魔王。\n　魔王滿臉疑惑，然後仔細望了一下：那位勇者的武鬥等級竟然只有 2！做為遊戲第三章（當初是最後一章）的最後之地，沒有個七、八十等幾乎打不贏的魔王城，竟然出現了一個只有武鬥二級的人！？\n　勇者舉起手，沒有任何殺意、也沒有任何戰鬥意圖，反而像是在跟他打招呼。\n　魔王一時間不知如何反應，下意識地也揮手致意。\n　魔王再仔細凝望：生活技能滿等！！？？\n　在這個追求快速打怪升級的時代，竟然還有人把生活技能都練到滿等？而且還是個只練生活技能的怪咖！？\n　勇者突然怯生生地問了一句：「呃⋯⋯介意我喝一杯茶嗎？我走了一長段路，有點渴。」\n　來魔王城、面對魔王、找水喝？\n　「噗哈哈哈哈哈哈哈哈哈哈哈」魔王大笑，狂霸地笑聲在宮殿內嗡嗡迴響。勇者愣了一下，然後也開心地笑了幾聲。\n　這世界果然還是有這種，真心體會遊戲每個細節、享受遊戲的勇者吧。\n　魔王開懷大笑，邀請勇者過來一起品味茶點。\n"},{"id":19,"href":"/posts/webpack-basic-usage/","title":"Webpack Basic Usage","section":"隨筆","content":"( 2017-05-03 寫作當下使用的是 webpack 2.3.3)\nWebpack 是個神奇且好用的東西，但 webpack2 的 document 目前不盡完善，有許多狀況與細節並沒有解釋或解釋詳盡。在這裡簡單的介紹使用 Webpack 完成 Code splitting ，以及使用 Chunkhash 達成解決 File Caching 的過程。\n打包 (Bundle) #  打包是最基本的 Webpack 功能，假設我們有個檔案叫index.js，裡面長得像是\n\u0026#39;use strict\u0026#39;; var axios = require(\u0026#39;axios\u0026#39;); (function(){ ... 那麼，基本的webpack.config.js大概定義如下\n\u0026#39;use strict\u0026#39;; var webpack = require(\u0026#39;webpack\u0026#39;); var path = require(\u0026#39;path\u0026#39;); var config = { entry: { app: \u0026#39;./src/index.js\u0026#39; }, output: { filename: \u0026#39;[name].js\u0026#39;, path: path.resolve(__dirname, \u0026#39;dist\u0026#39;) } } module.exports = config; 當我們執行webpack --config webpack.config.js之後，webpack 大概做了以下的事情：\n 根據entry的定義，知道要打包一個叫做app的檔案，從./src/index.js作為起始文件，開始讀取檔案 index.js裡面require('axios')，因此在執行環境中尋找axios插件，一般會從entry的相對路徑以及node_modules裡面找。 把index.js和axios打包成一份檔案輸出為app.js，output的[name].js就是指檔案名稱用entry所指定的，然後檔案放置的位置以path指定。其中__dirname是指執行webpack指令的根目錄  也就是說，我們開發可以結構化地把檔案分拆，像一般寫程式那樣。但我們不需要在 template 中用許多個\u0026lt;script\u0026gt;將所有js檔案載入，並還要注意先後順序。執行完webpack之後，只需要載入app.js就可以了。\n多個檔案打包成一個 #  \u0026#39;use strict\u0026#39;; var webpack = require(\u0026#39;webpack\u0026#39;); var path = require(\u0026#39;path\u0026#39;); var config = { entry: { app: [\u0026#39;./src/index.js\u0026#39;, \u0026#39;./src/auth.js\u0026#39;, \u0026#39;./src/message.js\u0026#39;] }, output: { filename: \u0026#39;[name].js\u0026#39;, path: path.resolve(__dirname, \u0026#39;dist\u0026#39;) } } module.exports = config; webpack 會按照陣列的順序，一一打包檔案，然後整合為一包app.js\n打包成多個檔案 #  \u0026#39;use strict\u0026#39;; var webpack = require(\u0026#39;webpack\u0026#39;); var path = require(\u0026#39;path\u0026#39;); var config = { entry: { app: \u0026#39;./src/index.js\u0026#39;, auth: [\u0026#39;./src/auth.js\u0026#39;, \u0026#39;./src/user.js\u0026#39;], message: \u0026#39;./src/message.js\u0026#39; }, output: { filename: \u0026#39;[name].js\u0026#39;, path: path.resolve(__dirname, \u0026#39;dist\u0026#39;) } } module.exports = config; 這樣設定的話，webpack 最終就會打包出三個檔案，分別是app.js,auth.js,message.js\n拆分 (Code Splitting) #  每次執行webpack，webpack就會幫我們將檔案重新打包、更新。但隨著架構愈來愈大時，我們自己的檔案、使用的第三方套件增多，我們打包出來的檔案也會愈來愈肥。這對頁面載入將是個很大的負荷。有時候我們可能只是改個一兩行，但整個app.js就會需要更新，使用者端就需要重新載入新的一整大包。\n但其實第三方套件並不像我們自己的 Code 那麼經常變動，通常是我們自己想升版才會更動。而且寫js我們會使用的第三方套件通常挺多。如果能將這些部分與我們自己的 Code 分開打包成不同的一包，在我們更新自己的 Code 的時候，只會更新我們 Code 整合的那包，不會更動到第三方套件的那一包，可以減少一定程度的 Loading 負荷。\n首先我們將webpack.config.js中的 config 更新成\nvar config = { entry: { app: \u0026#39;./src/index.js\u0026#39;, vendor: \u0026#39;axios\u0026#39; }, output: { filename: \u0026#39;[name].js\u0026#39;, path: path.resolve(__dirname, \u0026#39;dist\u0026#39;) } } 執行webpack，axios這個第三方套件的會被打包進vendor.js，但我們會發現app.js裡面還是有axios，這是因為不同的entry，webpack 會分開打包，各自的 dependencies 各自處理。\n為了讓共同的第三方套件都打包成同一包，我們將webpack.config.js更改為\nvar config = { entry: { app: \u0026#39;./src/index.js\u0026#39;, vendor: \u0026#39;axios\u0026#39; }, output: { filename: \u0026#39;[name].js\u0026#39;, path: path.resolve(__dirname, \u0026#39;dist\u0026#39;) }, plugins: [ new webpack.optimize.CommonsChunkPlugin({ name: \u0026#39;vendor\u0026#39; }) ] } CommonsChunkPlugin會將各個entry中共同的套件包裝到指定的name檔案。所以當我們執行webpack之後，我們會發現這次axios只出現在vendor.js了。\n我們可以進一步將webpack.config.js再改為\nvar config = { entry: { app: \u0026#39;./src/index.js\u0026#39;, }, output: { filename: \u0026#39;[name].js\u0026#39;, path: path.resolve(__dirname, \u0026#39;dist\u0026#39;) }, plugins: [ new webpack.optimize.CommonsChunkPlugin({ name: \u0026#39;vendor\u0026#39;, minChunks: function (module) { // this assumes your vendor imports exist in the node_modules  return module.context \u0026amp;\u0026amp; module.context.indexOf(\u0026#39;node_modules\u0026#39;) !== -1; } }) ] } 其中minChunks是指定判定套件為共同套件的條件，將其打包進指定檔案中。若是將minChunks指定為 2，那麼就是說在各entry中，總共出現2次以上的套件就將其打包進vendor.js這的檔案。而我們在這邊寫的 callback，是判斷套件若是有出現在node_modules中的，就視為共同套件打包進vendor.js中。\n值得特別注意的是在這次的webpack.config.js中，我們的entry沒有指定vendor，僅僅靠CommonsChunkPlugin完成第三方套件的打包。這在 webpack 稱為 Implicit Common Vendor Chunk。\n版本 (Chunkhash) #  瀏覽器多有 Cache 的機制，static file (image, css, js\u0026hellip;etc)會留有一份快取在 client 端。在一定時間內，若是瀏覽器發現這網站要求app.js，而app.js在本地端有一份 copy ，那瀏覽器會使用本地的app.js copy。這個機制是為了優化網頁的讀取，但卻造成了一個麻煩的情況。當我們更新了app.js，但因為檔名沒變，瀏覽器不會知道檔案內容改變了，會繼續使用本地端較舊的 copy 版本。\n為了解決這個問題，通常的辦法是在檔案名稱加上版本號：app.v1.js。當我們更新app.js時，就更新版本號：app.v2.js，讓瀏覽器認為是要求一份不同的 js ，達到即時更新的效果。\n身為一位工程師，改 code 才是我們的本職。需要在每次改 code 之後去注意版本號、手動更新，是一件麻煩且浪費我們腦內記憶體的事情。透過 webpack ，我們可以輕鬆達成這件事。\n將webpack.config.js中的output改為\noutput: { filename: \u0026#39;[name].[chunkhash].js\u0026#39;, path: path.resolve(__dirname, \u0026#39;dist\u0026#39;) ... } webpack 打包檔案之後，會在檔案名自動添上一個chunkhash，所以我們會得到一個像是app.3c75dbb16437c09415ac.js的檔案名稱。每次更改 code，重新打包，webpack 就會產生一個新的 chunkhash，也就達成了更改版本的效果。\n每個打包出的檔案的chunkhash都是 unique 的，這在打包成不同檔案的時候，可以幫助我們達到一個目的：更新app.js時，若vendor.js不需要更新，他可以維持舊的chunkhash，進而達到讓瀏覽器「只更新需要更新的套件」這件事。\n但實際執行webpack後，我們會發現當我們更改了一小段index.js的 code，產出的 app.[chunkhash].js 和 vendor.[chunkhash].js 的[chunkhash]部分都更新了，並沒有達到預期的只更新app.js的效果。\n這是因為每次 webpack 在執行打包時，會將一些 runtime code 帶進打包出的 Common Chunk 之中，也就是我們的 vendor.js，來幫助打包後的檔案處理引入插件。為了解決這個問題，我們再引入一個叫做 manifest 的檔案來處理這個問題。\nmanifest #  var config = { entry: { app: \u0026#39;/src/index.js\u0026#39; }, output: { filename: \u0026#39;[name].[chunkhash].js\u0026#39;, path: path.resolve(__dirname, \u0026#39;dist\u0026#39;) }, plugins: [ new webpack.optimize.CommonsChunkPlugin({ name: \u0026#39;vendor\u0026#39;, minChunks: function (module) { return module.context \u0026amp;\u0026amp; module.context.indexOf(\u0026#39;node_modules\u0026#39;) !== -1; } }), // extract all common modules from vendor and app bundles  new webpack.optimize.CommonsChunkPlugin({ name: \u0026#39;manifest\u0026#39; }) ] } 這樣的設定下，首先 webpack 會把屬於 node_modules 中的第三方套件通通打包進 vendor，然後再把 app 和 vendor 共同的 modules 打包進 manifest。但因為 vendor 和 app 並沒有共同套件了，所以 manifest 最後只剩下 runtime code。\n之後 html 只要按順序把 manifest.[chunkhash].js, vendor.[chunkhash].js 和 app.[chunkhash].js載入，就可以讓我們的 scripts 動起來了。雖然這樣我們多載入了一個檔案，但少變動 vendor 所省下的 loading 總的來說還是有益的。\nHTML template #  一切都已逼近完美，只差當每次執行完webpack，我們就要更新一次我們的 template，把新的\u0026lt;script\u0026gt;部分的檔案名中的chunkhash更新。官方的教學是透過ChunkManifestPlugin產出一個manifest.json，會帶有檔案對應的資訊，然後把它直接在 template inline 引入。這種人工的作法實在令人覺得功虧一簣。另外還有一種方法是透過HtmlWebpackPlugin幫我們產生一個帶有chunkhash版本號的\u0026lt;script\u0026gt;的 html template。但使用方式略複雜，而且對於 template 有需多限制，若要客製化還要再學習許多插件。\n基於我們只是想要簡單的讓 webpack 幫我們自動換版本號而已，小魚自己實在不想為了這件事再多加入這些東西。經過一段時間的 google + stackoverflow 之後，先寫出了以下的暴力做法。\n在webpack.config.js的plugin處多加一個自己寫的 Plugin\nplugins:[ ..., function () { var templatePath = path.resolve(__dirname, \u0026#39;templates\u0026#39;); var rawFilePath = path.join(templatePath, \u0026#39;src/scripts.html\u0026#39;); var outFilePath = path.join(templatePath, \u0026#39;base/partials/scripts.html\u0026#39;); var str = fs.readFileSync(rawFilePath, \u0026#39;utf8\u0026#39;); if (process.env.NODE_ENV === \u0026#39;production\u0026#39;) { this.plugin(\u0026#34;done\u0026#34;, function (stats) { var counter = 0; var replaceInFile = function (toReplace, replacement) { var replacer = function (match) { console.log(\u0026#39;Replacing %s =\u0026gt; %s\u0026#39;, match, replacement); return replacement }; str = str.replace(new RegExp(toReplace, \u0026#39;g\u0026#39;), replacer); counter++; if (counter === stats.compilation.chunks.length) fs.writeFileSync(outFilePath, str); }; stats.compilation.chunks.forEach(function (chunk) { replaceInFile( chunk.name + \u0026#39;.js\u0026#39;, chunk.name + \u0026#39;.\u0026#39; + chunk.renderedHash + \u0026#39;.js\u0026#39; ); }); }); } else { fs.createReadStream(rawFilePath).pipe(fs.createWriteStream(outFilePath)); } } ] 我們把\u0026lt;scripts\u0026gt;部分的 html 獨立成一個 template，然後直接使用node的fs來進行檔案的 I/O，讀入\u0026lt;script\u0026gt;的 template ，然後將檔案中的檔案名稱置換成帶有chunkhash的字串，再輸出成production用的 template。\n我們設定this.plugin只在NODE_ENV === 'production'的時候執行，並且是在 webpack 已經打包完的done的階段，把結果的資訊讀出來，然後進行操作。而在開發模式下，不用多帶chunkhash可以省下一些麻煩，所以就略過這步驟。也可以把這段 code 寫成一個插件，然後在webpack.config.js引入，會讓程式碼看起來乾淨些。這邊只是一個簡單的快速介紹。\n要注意的是，雖然官方文件說：\n Running webpack -p (or equivalently webpack --optimize-minimize --define process.env.NODE_ENV=\u0026quot;'production'\u0026quot;).\n 但這裡的process.env.NODE_ENV並不是指定你執行時的NODE_ENV，而是對於 webpack 而言的變數。因此若我們就這麼執行webpack -p --config webpack.config.js，我們寫的那段 plugin 所認得的process.env.NODE_ENV是執行webpack指令的 node 環境，而非 webpack 自己設定的變數，webpack 還是只會跑開發部分的程式碼。（小魚還沒深入去了解其中的原因）\n要解決這個問題，你可以使用官方的EnvironmentPlugin來處理，或者簡單地把你的指令改成NODE_ENV=production webpack -p --config webpack.config.js就可以了。\n如此一來，在 production 環境下執行 NODE_ENV=production webpack -p --config webpack.config.js，webpack 就會幫我們把檔案打包好，加上chunkhash，然後再幫我們更改\u0026lt;script\u0026gt;的 template 了。\n結語 #  這只是最、最、最基本的 webpack 功能，完全還無法體現 webpack 的強大之處。webpack 的各種插件、各類型檔案的花式打包、各種玄妙的 bundle 設定⋯⋯才是 webpack 強大且非同凡響的地方。不然其實以上這些功能，使用其他的打包工具也是能達到相同效果的。\n這次只是簡單介紹了一下 webpack 最基本的使用與設定，若要深入感受 webpack 的強大，還是要多去瞭解與研究。\n"},{"id":20,"href":"/posts/stories/practice-20170503/","title":"【練習】月蝕、表現主義、布朗尼","section":"Stories","content":"　糕點師把布朗尼放在簡約的純白瓷盤上，端到了女人面前。\n　女客人呆望了一下，用充滿疑惑的眼神詢問糕點師，還有點失笑。面對這狐疑的面容，糕點師只是微微一笑，輕輕頷首，示意肯定。\n　女客人挑眉，拿起瓷盤上的小鐵匙，挖了一小塊布朗尼嚐了味道，然後用更疑惑的眼神看著糕點師。但糕點師依舊帶著微笑，一點都沒有動搖的感覺。\n　女客人決定直接問：「我是說，想要一個相稱於『失戀』的味道吧？巧克力布朗尼？你是說這甜到心坎裡的東西叫做失戀？」\n　糕點師笑了笑：「是的，這種布朗尼叫『月蝕』。」\n　女客人完全沒有被說服：「我剛剛還想說難不成材料不一樣，但確實就是普通的布朗尼呀？是一般的糖粉，也是一般的巧克力，一般的甜，這叫熱戀還差不多，你說這叫失戀？！」\n　糕點師笑開了些，但還是認真地回答疑問：「是的，這個月蝕布朗尼，確實是以『失戀』為主題打造出來的。失戀，是感情的一種階段；而一段感情的開始，通常是甜而喜悅的。失戀的苦和痛，是因為有前面情感的累積，才會在失去時有強烈的傷心。若是沒有一開始的醞釀，失戀也不會那麼痛徹心扉了。」\n　女客人歪著頭瞧著糕點師，露出一種稍稍接受的感覺：「喔～所以你做這種布朗尼，要讓人重溫那種傷心啊？」\n　糕點師紳士地回答：「因為這個布朗尼的主題是『失戀』，而不是『療傷』啊。」\n　女客人點了點頭：「好吧，姑且先相信你不是臨時胡扯的。」\n　她挖了下一口，送入嘴中品嚐巧克力的綿密柔甜。生巧克力自蛋糕的縫隙間緩緩滑出，像甜膩得化不開的楓糖，如膠似漆似地纏繞著鬆軟的蛋糕部分。女客人微微一笑，有自信的眼神看著糕點師：「那麼現在這口，就是熱戀中，那整天膩在一起的情侶囉。」\n　糕點師緩緩點頭：「妳能體會出箇中含義，是我的榮幸。」\n　女客人頑皮地看著糕點師：「但我要的『失戀』可還沒出現呢！」糕點師左手向布朗尼做出了個邀請的動作。\n　女客人順著意，用小湯匙繼續切下下一塊，一邊問道：「既然主題是失戀，那為什麼要叫做『月蝕』呢？」\n　糕點師回答：「嗯⋯⋯就外觀而言呢，這份布朗尼上的糖粉，是蔗糖磨的。糖粉散落在上，讓整塊布朗尼看起來像個滿月，這是『月』的這個概念的由來。而我們在品嚐它的時候，一口一口挖掉的過程，就像是在吞噬月亮一樣，不就是『月蝕』嗎？」\n　女客人接著說：「嗯哼，但我有注意到喔！」她拿著小湯匙指向糕點師：「你說這是就『外觀』而言。你一定不會是個就看外觀決定名字的人，還有什麼其他的原因吧？」\n　糕點師呵呵輕笑，一如往常輕輕點了頭，然後才說：「是的，正如妳所說，確實不只是因為像。名字最初的靈感，確實是從外觀來的。但之所以決定用這個名字，是因為『月蝕』，其實也很適合用來描述失戀⋯⋯」\n　女客人的臉稍稍皺了一下：「就像這黑醋栗的酸，在描述吃醋的感覺這樣嗎？」\n　糕點師的語調略顯開心地繼續說：「是的，味覺上的失戀，我用這布朗尼表達。而一個相稱的名字，就是『月蝕』了。月蝕、或者說月全蝕，只發生在滿月。美麗的滿月，不就像是我們感情最美好的時光，而月蝕那漸漸吞噬月亮的過程，就像是漸漸流失的情感，令人不捨。但月蝕不像日蝕，月亮不會消失，只是會黯淡、會變紅、會變成令人懼怕的紅月。如果消失了，或許還比較好；留著相似的樣子，但卻是全然不同的畫面，更令人懷念滿月的美好。」\n　女客人因黑醋栗的酸澀為蹙著眉：「你是浪漫主義的人嗎？」\n　糕點師微微搖頭：「不，我想我是比較表現主義一點的人。」\n　女客人似乎不太同意，但她繼續品嚐下一口。\n　「唔，這苦味⋯⋯是90%的巧克力？」\n　「是 99%。」糕點師回答。\n　「而且還特別乾澀。」女客人補充。\n　「不苦澀，就不是失戀了吧？」糕點師反問。\n　女客人抱怨著：「噢⋯⋯這麼乾，這怎麼吃？」\n　「哈哈哈」糕點師笑著：「這裡我可是下足了功夫，想辦法在同樣外表下，呈現截然不同溼度，以展現完全不同的味道呢。」\n　女客人努力地吃著下一口：「天啊⋯⋯吃完前面那些，再吃這個，真的有點無法接受啊！」\n　糕點師說：「但這不就是失戀嗎？想要偽裝成一副沒事的樣子，但其實裡頭早已完全不是一回事了。」\n　女客人雙手握緊小湯匙，吃力地吞嚥著：「真想要留住之前的味道啊，最後用這種方法收尾，真是太糟糕了。」\n　糕點師苦笑：「但事實是，通常我們只能接受殘酷的現實呢。」\n　女客人無奈地點了點頭，看著最後一口，鼓起勇氣說：「是啊⋯⋯再怎麼殘酷，還是要吃下這難嚥的味道啊。」\n　女客人正要伸手，卻被糕點師制止了。\n　糕點師拿走她的小湯匙，然後說：「失戀是殘酷的味道，但我們終究不應該停滯於此。」他撈起瓷盤上最開始流下的生巧克力，將它淋在最後一小塊布朗尼上：「走過的時光、曾經的情感是真的，是因為曾經付出過才那麼痛，但也是因為曾經付出過才那麼甜。是當時的甜有了現在的我們，也是體會了現在的苦、走過之後，才會有未來的我們。失戀令人痛苦，但我們不能沒有成長。這份甜苦交織的味道，是只屬於認真愛過、認真失去過的人，才能品味的獨特味道。不要讓感情停止在失戀這一刻，讓它過去，讓妳的過去都成為妳的養分。」他將小湯匙遞還給女客人。\n　女客人第一次沒有馬上行動，猶豫了很久，然後有些失笑：「我真沒想過我會在布朗尼上體驗到這麼多層次的味道。」她有些膽怯地吃下最後一口：「苦⋯⋯和甜，是嗎？」她細心地品嚐著：「還有一些些酸呢。」她笑著補充：「這才是⋯⋯這塊布朗尼真正的味道，是嗎？」\n　糕點師沒有回答這個問題，他只是靜靜地回望她的雙眼，讓她些微泛紅的眼框，回應她自己的心。\n　女客人吞下了最後一口，良久沒有說話，就這麼靜靜望著桌面，出神地想著事情。然後默默起身，向糕點師道了謝，便要離去。\n　「客人，等等。」糕點師輕喊，女客人停下身回頭看。糕點師拿起小瓷盤，然後向她說：「月蝕布朗尼的最後，不是這樣的。」他拿起盤子，回到櫃台後面的流理台，清洗著盤子，一邊說道：「月蝕的最後，不是那紅月。紅月是會過去的。」他將洗乾淨的盤子用抹布仔細地擦乾淨，然後遞給了女客人。\n　「月蝕之後，請讓妳的心，可以再接受下一個布朗尼。」\n"},{"id":21,"href":"/posts/stories/practice-20170430/","title":"【練習】衣架、軟玉溫香、文化資產","section":"Stories","content":"　老師傅持著木板子，輕輕拍落絲綢衣上的塵埃，動作細膩，彷彿呵護著嬰孩的肌膚般。但他瞅著門口的眼神卻兇狠異常，煞氣四射，便似下一秒就要與不共戴天之仇人火拚，迥異於溫柔輕巧地拍打聲。\n　「打擾了。」門口的少年畢恭畢敬作揖。\n　老師傅沒有回覆，只是盯著少年，確認著少年是否有下一步動作。未聞答聲，少年頭就這麼低著，沒有絲毫輕忽之意。良久，老師傅才怒氣沖沖地開口：「來這做啥？這裡沒有你想要的東西，速速離去。」\n　少年這才抬起頭看著老師傅：「不，確實有些事想詢問師傅。」\n　「你來幹啥的？」\n　「有人請我來除妖。」\n　老師傅冷笑一聲：「這麼說，小兄弟是來除我的？」\n　少年恭敬地回道：「作為一名除妖師，分清人與妖的差異是基本中的基本。在下認得清楚師傅您是人非妖，絕無誤會，也沒加害之意。」\n　或許是少年謙恭的態度打動了老師傅，老師傅拍著衣服沈默了一陣子，第一次以一位長者的態度正色道：「不用了，小兄弟你回去吧。我在這兒住了十餘年，我能保證這裡無妖異之物。倘若有，那也不會是什麼惡鬼羅煞。雇你來的那夥小毛孩兒，貪玩胡鬧，自己心裡有鬼，才以為這兒有鬼，請你過來。這兒沒什麼鬼，你回去吧，別瞎忙。」\n　少年也莞爾一笑，回道：「師傅所言極是，自我進門觀察，我也沒發現有任何妖異之氣。不僅沒有妖異之氣，反倒有些靈氣。」\n　老師傅疑道：「靈氣？」\n　「是的。」少年看向庭院之中，三大排各式各樣、五顏六色的精緻衣裳：「這些華美的服飾，每件都如同新衣似，但這靈氣絕非朝夕可養成。想來這些衣裳必然是有些歲月，之所以仍如此嶄新，看看方才師傅的動作，便清楚了。我想大概也是師傅您如此細心地照料這些衣裳，費盡心思，才使得這些衣裳漸漸有了靈氣。」少年面向老師傅，再次躬身一敬：「靈氣不是積年累月即可得，師傅花在這上面的心思、專注與精神定是世間罕有，實在可敬。」\n　老師傅再次沈默不語，只是靜靜地拍著他的衣服。少年敬了禮之後，開始認真地仔細欣賞每件衣裳。老師傅沒有阻止，看來是默許了。\n　逛了一陣子，少年問道：「師傅以前是唱戲的？」\n　老師傅依舊專心地拍著衣服，但這次給了回應：「不，我是做戲園的。」\n　「喔？怪不得有這麼多戲服。」少年點著頭。\n　老師傅嘲諷笑著：「小毛孩兒以為我做這些衣服養殭屍呢。」\n　少年帶歉苦笑：「年輕一輩已經不太懂這些文化資產了呢。」　　老師傅惆悵道：「哪兒的文化？哪兒的資產？這年頭早已沒人看戲、聽戲，新世代只懂得影音聲色。這東西早已歸入歷史一流啦。」\n　少年無言以對，然後疑問：「不過，怎麼都是些女服呢？」\n　一直拍著衣服的老師傅第一次停下了手上的木板子，但他沒有回話，只是看著眼前的戲服，靜靜地摸著。少年也沒催促，逛完了一排，再逛下一排。少年注意到每件衣裳的衣架不盡相同，似乎都是為那件戲服特製的，讓衣服平整地展開晾好，不會產生皺摺。每個衣架都有個編號，看來確實是如猜想。\n　良久，老師傅的聲音從隔著兩排的戲服處傳來：「其實這些不是戲服，這些都是⋯⋯內人的衣服。」老師傅平靜的語氣中，透露著深深的思念：「她不是角兒，但跟著我辦戲園辦了一輩子，也愛穿著戲服玩。我起初買了幾件送她玩，沒想她從此便穿著戲服當便服，逛街、工作、教訓人都穿著，我還為此頭疼了好些日子。」老師輕輕笑了聲，然後憐惜地望著衣服：「雖然她先我十幾年走了，但只要看著這些戲服，就讓我感覺她仍在我身旁。」\n　「師傅您真的很照顧這些衣服，就像照顧您夫人一樣吧。」\n　「畢竟是軟玉溫香，憐惜是應該的。」老師傅含情脈脈道：「唉，只是比起在這兒與一個糟老頭作伴，其實她會更想有人繼承這些衣服，穿著它們上台唱曲子吧。只可惜這年代已看不上我們這種老朽不入流的玩意兒，我也不爭氣，沒能找著傳承的人。」\n　少年感慨同心，但在潮流洪荒之力、社會文化風氣之下，也無法說些什麼。少年只是道：「不過師傅，夫人想必也是很開心能陪著您的。必定是您對待這些服飾的真誠，與夫人的思念，這即使暫別兩界也鶼鰈情深的至情，才讓這些衣裳在這些年，養成了靈性的。」\n　老師傅只是淡淡一笑：「小兄弟，你這話聽起來，可是像極了詐財的神棍。」\n　少年哈哈回道：「但師傅請相信，神棍不收錢的時候，講得可必定是真話了。」\n　老師傅莞爾，繼續拍塵。\n　少年拜別道：「師傅，在下這詐財的神棍，除得了妖魔，但除不了心魔。無法跟那群小孩交代的我，要先三十六計，走為上策了。」\n　老師傅點了點頭，沒有回話，但嘴角的微笑，已沒有最初的殺氣騰騰。\n　少年走出院子，但見牆邊睡倒著一位少女，小嘴微張，口水都快流了出來。少年無奈地搖醒少女，然後無語道：「叫妳守著門，妳竟然給我睡成這個樣子。」\n　少女睡眼惺忪，似乎沒有聽進去話。她出神地望著少年，看了看四周，似乎還不清楚狀況。\n　少年搔了搔頭：「也罷，反正這次確實不是妖怪啦。」他一把拉起了少女，然後道：「好啦，沒有妖，就沒有我們出場的份了，該走啦。」\n　少年也不知少女究竟有沒有懂，但姑且是點了個頭回應。背好了包包，少年牽著少女，再次走上了旅程。\n"},{"id":22,"href":"/posts/when-to-refactor/","title":"什麼時候做重構 (Refactor)？","section":"隨筆","content":" 重構 (Refactor)\n在不改變外部行為的情況下，對內部設計做更動\n 這問題大概是所有寫程式的新手、中堅，甚至經驗老道的高手，都會困擾的疑惑。寫程式用一種很偏頗的角度來說，其實也是一種文字工作者；如果以文字工作者的角度看待，腦袋就算再好，工作效率的極限大概也就是打字的速度。從簡單的物理公式發想，我們大致上可以這樣極度簡化地說明一個工程師的產出:\n 產出 = 打字速度 X 時間\n 既然打字速度有其極限，重點就在於時間了！把時間用在哪裡，就決定了能在哪裡產出多少程式碼（碼農人生 QAQ）。因此，要把時間用在產出新的程式碼，還是去修改舊的程式碼？在衡量工作效益時，就變成一個十分重要的問題。\n至少要能用 #  先別管這個，你聽過⋯⋯咳哼，不對。\n「先別管美觀了，你的程式能用嗎？」\n把這個列為一個重點好像很白痴，但重點是提醒大家在注重、討論程式碼的外觀時，別忘了寫程式的大前提，是要寫一個會動、能用的程式，不要迷失在美觀的追求上。也在此強調儘管小魚認為程式碼的乾淨很重要、非常重要、重要性極高，但一個不會動的程式，沒有美化的意義。如果萬不得已只能寫很醜的一個程式，請還是寫出來，並努力讓它會動、能用。這終究是寫程式的一個最原始、最根本的需求。\n 在 不改變外部行為 的情況下，對內部設計做更動\n 有外部行為是這個定義的大前提。因此，小魚認為不要寫了三、五行程式碼，就急著回頭確認寫得好不好看、可讀性好壞、有無符合設計風格。當然，如果你寫個幾行就突然很有靈感要怎麼修改，馬上回頭改我也是沒什麼意見；但如果你在猶豫要繼續往下寫把功能刻好，還是回頭修改剛寫好的程式碼時，請不要猶豫，請務必先讓目前正在撰寫的功能能動。重構是這些外部行為都能正常運作之後，再來考慮的事。\n重構的時機 #  注意：不只是 剛寫完程式碼，確定功能可以正常運作的時候進行重構。\n 任何時候，當「重構」兩個字閃過你腦海，你就該馬上去做！\n 重構就是這麼重要，甚至比寫測試重要。我們不一定在開發流程中使用 TDD；但就算是測試，也需要重構。除非你非常確定你的程式碼「永遠」不會有需要更動的可能，或者你單純就想陷害下一個系統維護人員，不然重構程式碼這件事幾乎不該被推遲。\n下面就列出一些幾個可能常常被錯過的重構時間點：\n1. 剛完成一個功能 #  這大概是最好的重構時間點，沒有之一。在剛完成一個功能、確定這個功能可以正常運作的情況下，你對這段程式碼正是最熟悉的時刻，你非常清楚整個功能的架構，以及它內部實作的細節。你費盡心思終於讓它能夠運作，別讓自己的努力功虧一簣，重構它、美化它，讓它成為一個可以長期被維護、使用的一段程式碼。\n就是在這個腦袋剛為這個功能特化過的時間點，把程式碼重新整理，增加其可讀性，依據物件導向原則和設計模式做抽象化、封裝，是最有效率的重構時機。你幾乎不會再有哪個時刻比現在更熟悉這個功能的所有細節了，這個時候做重構你最能顧慮所有應顧慮的地方，你也最有把握不會不小心搞砸了什麼區塊，也是最好的時機請同事 Code Review，然後針對他們的建議再做修正。這是個重構成本最小、重構效率最高的時機，並且對日後效益最大的時間點。\n2. 爬程式碼發現看不懂的時候 #  這是個常常被忽略，但其實非常重要的時間點。你已經在「閱讀」它，並且發現你被它困惑，這至少就已經代表一個警訊：「這段程式碼的可讀性欠佳。」就算它是段什麼高明的、暗黑的演算法，是自己知識不足才看不懂，那它至少也缺少了一個東西——幾行註解，告訴我們可以在哪邊找到相關資料。\n不管最後你有沒有看懂，不管是你要親自改、或者請他人改，這段程式碼已經有非常明顯可以被改進的徵兆了，請不要放過它。放著就會忘，忘了下次還是會遇到，還是有可能會卡在這裡，然後又有一個人因此浪費了寶貴的時間。別小看自己，你會卡住的地方，別人也會卡住，不然 Stack Overflow 上為什麼總是能找到答案呢？\n LeBlanc\u0026rsquo;s law: Later equals never.\n 3. 靈光一閃的時候 #  這段程式碼可能沒什麼大問題，但你就是發覺有更好的寫法；你吃中餐、上廁所、或是逛臉書時，突然想到、或突然發現前些時候撰寫的程式碼，似乎有更好的寫法⋯⋯別猶豫，馬上改。就算手邊沒電腦，也記載筆記本上，把它加進代辦清單。\n拜託，你的靈感都來了，好好珍惜它，這機會不是每天有的啊！\n我們永遠不知道什麼時候一個程式碼會需要被修改、會被誰修改，就算確定只有自己會看，一個乾淨整潔的程式碼，總是比凌亂的要來得好維護、易閱讀，不但降火氣，還可以修身養性。一段容易被維護的程式碼才是好的程式碼，社會是在分工合作的情況下建立的，程式也是，為了自己、為了他人，我們投入在重構的小小時間，可是能對將來許多人帶來莫大效益的！別忘了：\n 寫程式時，我們花在閱讀程式碼的時間，遠大於花在撰寫的時間\n 重構不是要你改系統 #  重構之所以常常讓人猶豫不決，或許是因為有時想到重構，我們會發現需要重構的地方太多了。如果這樣重構下去，不知道要投入多少時間，所以不如還是把精力花在開發新系統吧。但這其實反映了兩個可能：\n1. 對，你需要重構 #  別鬧了，技術債只會愈堆愈高，放著不解不會減少。你不一定要一次全部重構到位，但你確實非常需要重構。不如把這些時間一併排入排程，一點一滴慢慢修，這麼一來才有機會慢慢讓整個系統變好。不然每次都在養債，總有一天債台高築，最後你要想的問題，不是要不要重構，而是要不要拋棄系統重新再刻一個了。\n這絕對只是花費更多的時間成本與人力資源，不會減少你之前堆起的債。\n2. 其實你需要的不是重構 #  另一種可能，是當你發現要重構的程式碼、類別太多的時候，你或許該仔細想想，有沒有可能是更高層級的「系統架構」出了問題？如果你的重構行為對整個系統有很大的更動，要調整許多東西、會干擾許多現行的功能，那麼你在思考的事情可能已經不是重構了。\n結語 #   自己寫的程式碼，三天後看著像自己未長大的孩子；三個月後看著覺得自己老人痴呆；三年後的呢？你變成了伊底帕斯你都不知道。\n 重構對於程式碼的長期維護非常重要，其重要性僅低於把程式碼寫到會動而已。重構基本上就是一個程式碼的「保值」行為呀！為了未來的自己、同事、那個你不知我也不知的陌生第三人，秉持著互相交流、互相學習、不要互相折磨的善良碼農文化，好好花時間、心思重構程式碼，你會發現你省下的時間遠超過你投入在重構上的成本。\n"},{"id":23,"href":"/posts/eisenhower-method/","title":"四象限管理法的一些心得","section":"隨筆","content":"下面這個經典的簡潔表格，就是有名的四象限時間管理法所使用的管理表格。\n   重要不緊急 重要且緊急     不重要不急 緊急不重要     四象限管理法 (The Eisenhower Method)\n英文借名於美國的艾森豪總統 (Dwight D. Eisenhower)，將事情依\n 重要（Important） 緊急 (Urgent)  兩個維度劃分。\n 但這篇文章的重點不是介紹這個方法，而是分享一些小魚自己實際使用後的心得。關於四象限管理法的詳細介紹，可以參考維基百科1以及MBA智庫2，或是直接 google 「四象限管理法」，你就會找到許多資料。\n小魚的心得 #  小魚自己使用的心得，主要有以下幾點：\n 重點在區分重要性，而不是時間分配 重要不緊急 先於 緊急不重要 吾日三省吾身！？  話不多說，接著就來一一說明吧！\n1. 重點在區分重要性，而不是分配時間 #  相較於其他時間管理方法，例如蕃茄鐘3，將重點放在如何做時間分配；四象限管理法更像是【80 / 20】法則4，重點在區分待辦事項的重要性（和緊急程度）。四象限管理法並不是強制我們事情一定要「重要先於不重要、緊急先於不緊急」不，沒有，並不是這樣的。\n 四象限管理法並沒有限制我們哪些事情一定要先做\n 事情的先後次序、哪個時段該安排什麼事情，還是得依照個人習慣與實際狀況而定，並不是依照表格把事情的重要性區分完之後，就一定得從【重要且緊急】的事情開始，然後最後再處理【不重要不急】的事。四象限管理法只是把事情依重要程度與緊急程度作區別，並沒有接著要求我們的時間分配。\n如果這樣，那麼，我們為什麼要使用四象限法則，來區分事情的重要性與緊急程度？\n 當事情太多，同一時段有多項事情需要競合時，四象限法則就派上用場了\n 手上的待辦清單有許多事需要做，但我只有一個、我不會分身，我的時間跟大家一樣只有 24 小時，要怎麼把時間花在刀口上、用在最有價值的事情上？小魚認為這才是四象限法則的精髓：當你在同一個時段，有太多事情要做時，四象限法則可以幫助你取捨優先順序。\n所以當我們在安排一天的行程時，早上起床後，我們應該安排「刷牙、洗臉、吃早餐」而不是「完成今天要出的企劃案」，儘管前者屬於「重要不緊急」（一天不刷牙洗臉真的不會怎麼樣⋯⋯真的！），而後者屬於「重要且緊急」，今天沒把該做的工作做完，可能就會有待業危機。\n這例子或許有點無腦，不過當我們依四象限法則分配完事情重要性與緊急程度之後，並非便要死板地按照順序逐一完成事項。\n 在不同的時段，會有不同適合該時段完成的事情，先把適合的事情挑出來。之後當事情太多不知道該怎麼取捨的時候，再來看看四象限法則。\n 2. 重要不緊急 先於 緊急不重要 #  使用四象限法則最常遇到的困擾，也是每位初學者、使用者最常感到困惑的，便是【重要不緊急】與【緊急不重要】孰輕孰重？\n先說小魚自己的結論，也就是這一段的標題：\n 重要不緊急 先於 緊急不重要\n 因為這問題是四象限法則裡最大的困難，所以同樣的一句話不厭其煩再講一次。不是每個人都同意這個答案，但這是我自己的答案。\n首先，小魚以為一件事情「重要」，便是完成這件事情，能帶來很大的效益、價值；一件事情「緊急」，便是這件事情需要被完成的時間非常迫切。因此，被歸類於【重要不緊急】的事情，是完成後能帶來很大的效益，但不急於完成的事情；相對的，【緊急不重要】的事情，就是事情快要到期、需要馬上被完成，但其實不會帶來很大的效益。\n定義好這兩類事情後，就能接著討論孰輕孰重。小魚以為：\n 事情的重要性通常不會輕易改變，但隨著時光飛逝，事情的緊急程度必然逐漸提升。\n 完成一件【緊急不重要】的事情，會感覺手上的事情減少一件，壓力會變小、心情會比較好、會比較放鬆，或許工作效率會因此變好，但可惜的是完成這件事其實帶來的效益非常有限。而當我們總是等到【重要不緊急】的事情，隨著時間經過，自然而然變成【重要且緊急】了才開始處理，那壓力勢必不小。在這種狀況下，其實我們便進入了「經常被死線壓著跑」的工作模式裡。當自己份內的事情在能力可以容許的範圍時，會因為總是能把所有事情處理完，而很有成就感；但一旦事情多了，那便容易經常處於壓力、焦慮的情況，總是追趕著緊急的待辦事項。尤其隨著職位愈來愈高，管理的事項愈來愈多，事情必然有增無減，將會非常容易陷入這種困境。\n另一方面，若我們優先處理【重要不緊急】的事情，我們必須放棄一些【緊急不重要】的事，然而相對的，我們能確保所有有價值的事情，都能有比較充裕的時間好好處理。\n 選擇放棄一件事情是困難的，尤其我們的文化期許著我們能盡善盡美。但只有我們學會捨棄一些事情，或許才能得到更多。\n 放著讓一些事情爛尾，這背離我們的教育經驗，但卻是人生必然要面對的一個課題。「人們終將會爬到一個他無法勝任的位置，才會停止。」背負太多的東西無法爬得高、走得遠，但若是懂得放下一些事情，我們才能到達更高的境界。當自己管理的事情愈來愈多，到了自己無法負荷的時候，能夠放下一些其實不那麼重要的事情，把心力著眼於真正重要的地方，才能讓自己在高處更處之泰然。\n作為從社會底層開始往上爬的平民們，我們通常會習慣「把自己份內的事情做完」，因此能夠「做完」常常成為我們比較關注的重點。但當我們隨著經歷成長，往高處爬時，「做好、做滿」才是更重要的事 XD。然而人的習慣是難改的，及早開始學習這種態度，小魚以為可以幫助我們走得更高、更久、更遠。\n因此，還是不厭其煩地再說一次：\n 重要不緊急 先於 緊急不重要\n 3. 吾日三省吾身！？ #  承襲上一點，因為選擇【重要不緊急】先於【緊急不重要】，因此當我們使用四象限法則分類完事情之後，其實也默默做了一個選擇\n 當事情多的時候，我們優先處理重要的事情\n 每次使用四象限法則，就是一次自我檢視。到底什麼事情對自己而言是真正重要的、是我們在乎的、是我們比較關心的？又哪些事情雖然我們也列入了待辦清單，但其實不是那麼重要，為什麼出現在清單上？\n我們想做的事情很多，人人都希望有充裕的時間，完成所有自己想做的事情。但人生最大的困境就是時間是有限的，而人類的慾望是無窮的，因此抉擇就變成了一道智慧課題。\n透過四象限法則，我們也會經常性地逼自己思考、反思，檢視我們真正在乎的價值，也讓我們掌握承擔的事情與責任。如果是劃入不重要的事情，是不是下次我們可以選擇拒絕、或交由其他人來處理？事情太多的時候，是不是有些事情可以請他人幫忙、或交給其他人來完成？有沒有自己其實很在乎，但經常被劃入不重要的事情？為什麼會發生這樣的事？\n 每次使用四象限法則，就是一次自我認識與成長，了解自己做事的習慣，並驗證自己真正在意的價值。\n 把事情分類是困難的，一開始也常常容易分錯重要程度與緊急程度。但當我們愈來愈熟習這套機制的時候，我們也會愈來愈了解事情的輕重緩急，然後更能把我們有限的時間與精力，使用在對我們來說最有價值的事情上。\n結語 #  四象限法則並不是唯一的時間管理方法，但是一套簡單同時富有人生哲學的一個入門管理方法。這個方法不難上手，但其中蘊含著很多智慧與省思，完全不是表面上的四個象限分類這麼單純而已。\n如果你還沒有任何自己喜歡的時間管理方法，或者你有時間管理困擾，推薦嘗試一下四象限管理法吧！\n  輕鬆上手、入門簡單 思想深刻、妙趣無窮   或者也分享一下你的時間管理方法 \u0026gt;U\u0026lt; ?\n延伸閱讀 #  想要更了解四象限管理法，或者其他文章內提到的方法，可以參考：\n  Wikipedia - Time Management\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n MAB智庫 - 四象限管理法\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n Wikipedia - 蕃茄鐘工作法\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n Wikipedia - 80 / 20法則\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n   "},{"id":24,"href":"/posts/typescript-import-module/","title":"Typescript import module","section":"隨筆","content":"For Typescript 2.0, which has the magic @type feature to manage typescript .d.ts definition files by npm, including module is much easy and elegant now!\nNotice: This example uses typescript with Gulp. The prerequisite can be found on typescript official site - Typescript with Gulp.\nDownload Module #  Install the module you want to use by npm.\nnpm install --save bootstrap @types/bootstrap The @types/bootstrap will tell npm to also collect the typescript definition of bootstrap, and place it under the @type directory under node_modules.\nInclude Module #  In your ts script where you want to include bootstrap, just add the line:\nimport \u0026#34;bootstrap\u0026#34; Then it is done!\n"},{"id":25,"href":"/posts/goisforlovers/","title":"(Hu)go Template Primer","section":"隨筆","content":"Hugo uses the excellent Go html/template library for\nits template engine. It is an extremely lightweight engine that provides a very\nsmall amount of logic. In our experience that it is just the right amount of\nlogic to be able to create a good static website. If you have used other\ntemplate systems from different languages or frameworks you will find a lot of\nsimilarities in Go templates.\nThis document is a brief primer on using Go templates. The Go docs\nprovide more details.\nIntroduction to Go Templates #  Go templates provide an extremely simple template language. It adheres to the\nbelief that only the most basic of logic belongs in the template or view layer.\nOne consequence of this simplicity is that Go templates parse very quickly.\nA unique characteristic of Go templates is they are content aware. Variables and\ncontent will be sanitized depending on the context of where they are used. More\ndetails can be found in the Go docs.\nBasic Syntax #  Golang templates are HTML files with the addition of variables and\nfunctions.\nGo variables and functions are accessible within {{ }}\nAccessing a predefined variable \u0026ldquo;foo\u0026rdquo;:\n{{ foo }}  Parameters are separated using spaces\nCalling the add function with input of 1, 2:\n{{ add 1 2 }}  Methods and fields are accessed via dot notation\nAccessing the Page Parameter \u0026ldquo;bar\u0026rdquo;\n{{ .Params.bar }}  Parentheses can be used to group items together\n{{ if or (isset .Params \u0026quot;alt\u0026quot;) (isset .Params \u0026quot;caption\u0026quot;) }} Caption {{ end }}  Variables #  Each Go template has a struct (object) made available to it. In hugo each\ntemplate is passed either a page or a node struct depending on which type of\npage you are rendering. More details are available on the\nvariables page.\nA variable is accessed by referencing the variable name.\n\u0026lt;title\u0026gt;{{ .Title }}\u0026lt;/title\u0026gt;  Variables can also be defined and referenced.\n{{ $address := \u0026quot;123 Main St.\u0026quot;}} {{ $address }}  Functions #  Go template ship with a few functions which provide basic functionality. The Go\ntemplate system also provides a mechanism for applications to extend the\navailable functions with their own. Hugo template\nfunctions provide some additional functionality we believe\nare useful for building websites. Functions are called by using their name\nfollowed by the required parameters separated by spaces. Template\nfunctions cannot be added without recompiling hugo.\nExample:\n{{ add 1 2 }}  Includes #  When including another template you will pass to it the data it will be\nable to access. To pass along the current context please remember to\ninclude a trailing dot. The templates location will always be starting at\nthe /layout/ directory within Hugo.\nExample:\n{{ template \u0026quot;chrome/header.html\u0026quot; . }}  Logic #  Go templates provide the most basic iteration and conditional logic.\nIteration #  Just like in Go, the Go templates make heavy use of range to iterate over\na map, array or slice. The following are different examples of how to use\nrange.\nExample 1: Using Context\n{{ range array }} {{ . }} {{ end }}  Example 2: Declaring value variable name\n{{range $element := array}} {{ $element }} {{ end }}  Example 2: Declaring key and value variable name\n{{range $index, $element := array}} {{ $index }} {{ $element }} {{ end }}  Conditionals #  If, else, with, or, \u0026amp; and provide the framework for handling conditional\nlogic in Go Templates. Like range, each statement is closed with end.\nGo Templates treat the following values as false:\n false 0 any array, slice, map, or string of length zero  Example 1: If\n{{ if isset .Params \u0026quot;title\u0026quot; }}\u0026lt;h4\u0026gt;{{ index .Params \u0026quot;title\u0026quot; }}\u0026lt;/h4\u0026gt;{{ end }}  Example 2: If -\u0026gt; Else\n{{ if isset .Params \u0026quot;alt\u0026quot; }} {{ index .Params \u0026quot;alt\u0026quot; }} {{else}} {{ index .Params \u0026quot;caption\u0026quot; }} {{ end }}  Example 3: And \u0026amp; Or\n{{ if and (or (isset .Params \u0026quot;title\u0026quot;) (isset .Params \u0026quot;caption\u0026quot;)) (isset .Params \u0026quot;attr\u0026quot;)}}  Example 4: With\nAn alternative way of writing \u0026ldquo;if\u0026rdquo; and then referencing the same value\nis to use \u0026ldquo;with\u0026rdquo; instead. With rebinds the context . within its scope,\nand skips the block if the variable is absent.\nThe first example above could be simplified as:\n{{ with .Params.title }}\u0026lt;h4\u0026gt;{{ . }}\u0026lt;/h4\u0026gt;{{ end }}  Example 5: If -\u0026gt; Else If\n{{ if isset .Params \u0026quot;alt\u0026quot; }} {{ index .Params \u0026quot;alt\u0026quot; }} {{ else if isset .Params \u0026quot;caption\u0026quot; }} {{ index .Params \u0026quot;caption\u0026quot; }} {{ end }}  Pipes #  One of the most powerful components of Go templates is the ability to\nstack actions one after another. This is done by using pipes. Borrowed\nfrom unix pipes, the concept is simple, each pipeline\u0026rsquo;s output becomes the\ninput of the following pipe.\nBecause of the very simple syntax of Go templates, the pipe is essential\nto being able to chain together function calls. One limitation of the\npipes is that they only can work with a single value and that value\nbecomes the last parameter of the next pipeline.\nA few simple examples should help convey how to use the pipe.\nExample 1 :\n{{ if eq 1 1 }} Same {{ end }}  is the same as\n{{ eq 1 1 | if }} Same {{ end }}  It does look odd to place the if at the end, but it does provide a good\nillustration of how to use the pipes.\nExample 2 :\n{{ index .Params \u0026quot;disqus_url\u0026quot; | html }}  Access the page parameter called \u0026ldquo;disqus_url\u0026rdquo; and escape the HTML.\nExample 3 :\n{{ if or (or (isset .Params \u0026quot;title\u0026quot;) (isset .Params \u0026quot;caption\u0026quot;)) (isset .Params \u0026quot;attr\u0026quot;)}} Stuff Here {{ end }}  Could be rewritten as\n{{ isset .Params \u0026quot;caption\u0026quot; | or isset .Params \u0026quot;title\u0026quot; | or isset .Params \u0026quot;attr\u0026quot; | if }} Stuff Here {{ end }}  Context (aka. the dot) #  The most easily overlooked concept to understand about Go templates is that {{ . }}\nalways refers to the current context. In the top level of your template this\nwill be the data set made available to it. Inside of a iteration it will have\nthe value of the current item. When inside of a loop the context has changed. .\nwill no longer refer to the data available to the entire page. If you need to\naccess this from within the loop you will likely want to set it to a variable\ninstead of depending on the context.\nExample:\n {{ $title := .Site.Title }} {{ range .Params.tags }} \u0026lt;li\u0026gt; \u0026lt;a href=\u0026quot;{{ $baseurl }}/tags/{{ . | urlize }}\u0026quot;\u0026gt;{{ . }}\u0026lt;/a\u0026gt; - {{ $title }} \u0026lt;/li\u0026gt; {{ end }}  Notice how once we have entered the loop the value of {{ . }} has changed. We\nhave defined a variable outside of the loop so we have access to it from within\nthe loop.\nHugo Parameters #  Hugo provides the option of passing values to the template language\nthrough the site configuration (for sitewide values), or through the meta\ndata of each specific piece of content. You can define any values of any\ntype (supported by your front matter/config format) and use them however\nyou want to inside of your templates.\nUsing Content (page) Parameters #  In each piece of content you can provide variables to be used by the\ntemplates. This happens in the front matter.\nAn example of this is used in this documentation site. Most of the pages\nbenefit from having the table of contents provided. Sometimes the TOC just\ndoesn\u0026rsquo;t make a lot of sense. We\u0026rsquo;ve defined a variable in our front matter\nof some pages to turn off the TOC from being displayed.\nHere is the example front matter:\n--- title: \u0026quot;Permalinks\u0026quot; date: \u0026quot;2013-11-18\u0026quot; aliases: - \u0026quot;/doc/permalinks/\u0026quot; groups: [\u0026quot;extras\u0026quot;] groups_weight: 30 notoc: true --- Here is the corresponding code inside of the template:\n {{ if not .Params.notoc }} \u0026lt;div id=\u0026quot;toc\u0026quot; class=\u0026quot;well col-md-4 col-sm-6\u0026quot;\u0026gt; {{ .TableOfContents }} \u0026lt;/div\u0026gt; {{ end }}  Using Site (config) Parameters #  In your top-level configuration file (eg, config.yaml) you can define site\nparameters, which are values which will be available to you in chrome.\nFor instance, you might declare:\nparams: CopyrightHTML: \u0026#34;Copyright \u0026amp;#xA9; 2013 John Doe. All Rights Reserved.\u0026#34; TwitterUser: \u0026#34;spf13\u0026#34; SidebarRecentLimit: 5 Within a footer layout, you might then declare a \u0026lt;footer\u0026gt; which is only\nprovided if the CopyrightHTML parameter is provided, and if it is given,\nyou would declare it to be HTML-safe, so that the HTML entity is not escaped\nagain. This would let you easily update just your top-level config file each\nJanuary 1st, instead of hunting through your templates.\n{{if .Site.Params.CopyrightHTML}}\u0026lt;footer\u0026gt; \u0026lt;div class=\u0026quot;text-center\u0026quot;\u0026gt;{{.Site.Params.CopyrightHTML | safeHtml}}\u0026lt;/div\u0026gt; \u0026lt;/footer\u0026gt;{{end}} An alternative way of writing the \u0026ldquo;if\u0026rdquo; and then referencing the same value\nis to use \u0026ldquo;with\u0026rdquo; instead. With rebinds the context . within its scope,\nand skips the block if the variable is absent:\n{{with .Site.Params.TwitterUser}}\u0026lt;span class=\u0026quot;twitter\u0026quot;\u0026gt; \u0026lt;a href=\u0026quot;https://twitter.com/{{.}}\u0026quot; rel=\u0026quot;author\u0026quot;\u0026gt; \u0026lt;img src=\u0026quot;/images/twitter.png\u0026quot; width=\u0026quot;48\u0026quot; height=\u0026quot;48\u0026quot; title=\u0026quot;Twitter: {{.}}\u0026quot; alt=\u0026quot;Twitter\u0026quot;\u0026gt;\u0026lt;/a\u0026gt; \u0026lt;/span\u0026gt;{{end}} Finally, if you want to pull \u0026ldquo;magic constants\u0026rdquo; out of your layouts, you can do\nso, such as in this example:\n\u0026lt;nav class=\u0026quot;recent\u0026quot;\u0026gt; \u0026lt;h1\u0026gt;Recent Posts\u0026lt;/h1\u0026gt; \u0026lt;ul\u0026gt;{{range first .Site.Params.SidebarRecentLimit .Site.Recent}} \u0026lt;li\u0026gt;\u0026lt;a href=\u0026quot;{{.RelPermalink}}\u0026quot;\u0026gt;{{.Title}}\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; {{end}}\u0026lt;/ul\u0026gt; \u0026lt;/nav\u0026gt; "},{"id":26,"href":"/posts/hugoisforlovers/","title":"Getting Started with Hugo","section":"隨筆","content":"Step 1. Install Hugo #  Go to Hugo releases and download the\nappropriate version for your OS and architecture.\nSave it somewhere specific as we will be using it in the next step.\nMore complete instructions are available at Install Hugo\nStep 2. Build the Docs #  Hugo has its own example site which happens to also be the documentation site\nyou are reading right now.\nFollow the following steps:\n Clone the Hugo repository Go into the repo Run hugo in server mode and build the docs Open your browser to http://localhost:1313  Corresponding pseudo commands:\ngit clone https://github.com/spf13/hugo cd hugo /path/to/where/you/installed/hugo server --source=./docs \u0026gt; 29 pages created \u0026gt; 0 tags index created \u0026gt; in 27 ms \u0026gt; Web Server is available at http://localhost:1313 \u0026gt; Press ctrl+c to stop  Once you\u0026rsquo;ve gotten here, follow along the rest of this page on your local build.\nStep 3. Change the docs site #  Stop the Hugo process by hitting Ctrl+C.\nNow we are going to run hugo again, but this time with hugo in watch mode.\n/path/to/hugo/from/step/1/hugo server --source=./docs --watch \u0026gt; 29 pages created \u0026gt; 0 tags index created \u0026gt; in 27 ms \u0026gt; Web Server is available at http://localhost:1313 \u0026gt; Watching for changes in /Users/spf13/Code/hugo/docs/content \u0026gt; Press ctrl+c to stop  Open your favorite editor and change one of the source\ncontent pages. How about changing this very file to fix the typo. How about changing this very file to fix the typo.\nContent files are found in docs/content/. Unless otherwise specified, files\nare located at the same relative location as the url, in our case\ndocs/content/overview/quickstart.md.\nChange and save this file.. Notice what happened in your terminal.\n\u0026gt; Change detected, rebuilding site \u0026gt; 29 pages created \u0026gt; 0 tags index created \u0026gt; in 26 ms  Refresh the browser and observe that the typo is now fixed.\nNotice how quick that was. Try to refresh the site before it\u0026rsquo;s finished building. I double dare you.\nHaving nearly instant feedback enables you to have your creativity flow without waiting for long builds.\nStep 4. Have fun #  The best way to learn something is to play with it.\n"},{"id":27,"href":"/posts/test/hello-world/","title":"Hello World","section":"Test data","content":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub.\nQuick Start #  Create a new post #  $ hexo new \u0026#34;My New Post\u0026#34; More info: Writing\nRun server #  $ hexo server More info: Server\nGenerate static files #  $ hexo generate More info: Generating\nDeploy to remote sites #  $ hexo deploy More info: Deployment\n"}]